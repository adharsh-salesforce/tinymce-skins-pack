import Promise from '@ephox/wrap-promise-polyfill';
export var countTests = function (suite) {
    return suite.tests.length + suite.suites.reduce(function (acc, suite) { return acc + countTests(suite); }, 0);
};
export var loop = function (items, fn, index) {
    if (index === void 0) { index = 0; }
    if (index < items.length) {
        return fn(items[index]).then(function () { return loop(items, fn, index + 1); });
    }
    else {
        return Promise.resolve();
    }
};
export var getTests = function (suite) {
    return suite.tests.concat(suite.suites.reduce(function (acc, child) {
        return acc.concat(getTests(child));
    }, []));
};
export var getSuites = function (suite) {
    return suite.suites.concat(suite.suites.reduce(function (acc, child) {
        return acc.concat(getSuites(child));
    }, []));
};
var hasOnly = function (suite) {
    var onlyTests = suite.tests.filter(function (test) { return test._only; });
    var onlySuites = suite.suites.filter(function (suite) { return suite._only; });
    if (onlyTests.length > 0 || onlySuites.length > 0) {
        return true;
    }
    else {
        // Check all the nested child suites
        return suite.suites.some(hasOnly);
    }
};
export var filterOnly = function (suite) {
    var onlyTests = suite.tests.filter(function (test) { return test._only; });
    var onlySuites = suite.suites.filter(function (child) { return child._only || hasOnly(child); });
    if (onlyTests.length > 0) {
        suite.tests = onlyTests;
        suite.suites = [];
    }
    else if (onlySuites.length > 0) {
        suite.tests = [];
        suite.suites.forEach(filterOnly);
        suite.suites = onlySuites;
    }
};
//# sourceMappingURL=Utils.js.map