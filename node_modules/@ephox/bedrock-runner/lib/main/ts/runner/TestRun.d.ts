import { Suite, Test } from '@ephox/bedrock-common';
import Promise from '@ephox/wrap-promise-polyfill';
import { Reporter } from '../reporter/Reporter';
declare type RunReporter = Pick<Reporter, 'test'>;
export interface RunState {
    readonly totalTests: number;
    readonly offset: number;
    readonly chunk: number;
    readonly timeout: number;
    testCount: number;
}
export interface RunActions {
    readonly onFailure: () => void;
    readonly onPass: () => void;
    readonly onSkip: () => void;
    readonly onStart: (test: Test) => void;
    readonly runNextChunk: (offset: number) => void;
}
export declare const runTest: (test: Test, state: RunState, actions: RunActions, reporter: RunReporter) => Promise<void>;
export declare const runTests: (tests: Test[], state: RunState, actions: RunActions, reporter: RunReporter) => Promise<void>;
export declare const runSuite: (suite: Suite, state: RunState, actions: RunActions, reporter: RunReporter) => Promise<void>;
export declare const runSuites: (suites: Suite[], state: RunState, actions: RunActions, reporter: RunReporter) => Promise<void>;
export {};
