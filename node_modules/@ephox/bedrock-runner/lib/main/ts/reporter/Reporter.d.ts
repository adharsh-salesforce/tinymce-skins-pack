import { LoggedError } from '@ephox/bedrock-common';
import { Callbacks } from './Callbacks';
import { UrlParams } from '../core/UrlParams';
declare type LoggedError = LoggedError.LoggedError;
export interface TestReporter {
    readonly start: () => Promise<void>;
    readonly retry: () => Promise<void>;
    readonly pass: () => Promise<void>;
    readonly skip: (reason: string) => Promise<void>;
    readonly fail: (e: LoggedError) => Promise<void>;
}
export interface Reporter {
    readonly summary: () => {
        offset: number;
        passed: number;
        failed: number;
        skipped: number;
    };
    readonly test: (file: string, name: string, totalNumTests: number) => TestReporter;
    readonly done: (error?: LoggedError) => void;
}
export interface ReporterUi {
    readonly test: () => {
        readonly start: (file: string, name: string) => void;
        readonly pass: (testTime: string, currentCount: number) => void;
        readonly skip: (testTime: string, currentCount: number) => void;
        readonly fail: (e: LoggedError, testTime: string, currentCount: number) => void;
    };
    readonly done: (totalTime: string) => void;
}
export declare const Reporter: (params: UrlParams, callbacks: Callbacks, ui: ReporterUi) => Reporter;
export {};
