import { Failure, Global } from '@ephox/bedrock-common';
import Promise from '@ephox/wrap-promise-polyfill';
import * as Globals from '../core/Globals';
import * as TestLoader from '../core/TestLoader';
import { UrlParams } from '../core/UrlParams';
import { makeSessionId } from '../core/Utils';
import { Callbacks } from '../reporter/Callbacks';
import { Reporter } from '../reporter/Reporter';
import { Runner } from '../runner/Runner';
import { loop } from '../runner/Utils';
import { Ui } from '../ui/Ui';
// Setup the globals
Globals.setup();
var setupAndRun = function (loadError) {
    var params = UrlParams.parse(window.location.search, makeSessionId);
    var ui = Ui($('body'));
    var callbacks = Callbacks();
    var reporter = Reporter(params, callbacks, ui);
    var runner = Runner(Globals.rootSuite(), params, callbacks, reporter, ui);
    runner.init().then(function (data) {
        if (data.mode === 'auto') {
            // Try to ensure the page has focus
            window.focus();
        }
        // Run the tests if an error didn't occur during loading
        if (loadError !== undefined) {
            return Promise.reject(loadError);
        }
        else {
            return runner.run(data.chunk, data.retries, data.timeout, data.stopOnFailure);
        }
    }).catch(function (e) {
        console.error('Unexpected error occurred', e);
        var err = Failure.prepFailure(e);
        ui.error(err);
        reporter.done(err);
    });
};
var run = function () { return setupAndRun(); };
var runError = function (e) { return setupAndRun(e); };
var loadAndRun = function (scripts) {
    // Load the scripts and then run
    loop(scripts, TestLoader.load)
        .then(run, runError);
};
Global.bedrock = {
    loadAndRun: loadAndRun,
    run: run,
    rootSuite: Globals.rootSuite()
};
//# sourceMappingURL=Main.js.map