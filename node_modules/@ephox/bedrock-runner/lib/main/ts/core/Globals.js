import { Global } from '@ephox/bedrock-common';
import * as Hook from './Hook';
import * as Register from './Register';
import { createSuite, createRootSuite } from './Suite';
import { createTest } from './Test';
var root = createRootSuite('');
var suiteStack = [root];
var getCurrentSuite = function () {
    return suiteStack.length > 0 ? suiteStack[suiteStack.length - 1] : undefined;
};
var getCurrentSuiteOrDie = function () {
    var currentSuite = getCurrentSuite();
    if (currentSuite === undefined) {
        throw new Error('Failed to find a current test suite');
    }
    else {
        return currentSuite;
    }
};
/*
  Mocha allows a mix of different overloads when registering hooks, so we need to account for them. The following are known:
  - (title: string, fn: ExecuteFn) => void
  - (title: undefined, fn: ExecuteFn) => void
  - (title: string) => void
  - (fn: ExecuteFn) => void
 */
var addHook = function (suite, type, title, fn) {
    var hookTitle = typeof title === 'string' ? "".concat(type, ": ").concat(title) : type;
    var hookFn = typeof title === 'function' ? title : fn;
    var hook = Hook.createHook(hookTitle, hookFn);
    suite.hooks[type].push(hook);
};
export var describe = function (title, fn) {
    var current = getCurrentSuiteOrDie();
    var suite = createSuite(title, current);
    current.suites.push(suite);
    suiteStack.push(suite);
    fn.call(suite);
    suiteStack.pop();
    return suite;
};
describe.only = function (title, fn) {
    var suite = describe(title, fn);
    suite._only = true;
    return suite;
};
describe.skip = function (title, fn) {
    var suite = describe(title, fn);
    suite._skip = true;
    return suite;
};
export var before = function (title, fn) {
    var suite = getCurrentSuiteOrDie();
    addHook(suite, "before" /* Before */, title, fn);
};
export var beforeEach = function (title, fn) {
    var suite = getCurrentSuiteOrDie();
    addHook(suite, "beforeEach" /* BeforeEach */, title, fn);
};
export var after = function (title, fn) {
    var suite = getCurrentSuiteOrDie();
    addHook(suite, "after" /* After */, title, fn);
};
export var afterEach = function (title, fn) {
    var suite = getCurrentSuiteOrDie();
    addHook(suite, "afterEach" /* AfterEach */, title, fn);
};
export var it = function (title, fn) {
    var suite = getCurrentSuiteOrDie();
    var test = createTest(title, fn, suite);
    suite.tests.push(test);
    Register.test(test);
    return test;
};
it.only = function (title, fn) {
    var test = it(title, fn);
    test._only = true;
    return test;
};
it.skip = function (title, fn) {
    var test = it(title, fn);
    test.setResult("skipped" /* Skipped */);
    return test;
};
export var setup = function (global) {
    if (global === void 0) { global = Global; }
    var globals = {
        before: before,
        beforeEach: beforeEach,
        after: after,
        afterEach: afterEach,
        describe: describe,
        xdescribe: describe.skip,
        context: describe,
        xcontext: describe.skip,
        it: it,
        xit: it.skip,
        specify: it,
        xspecify: it.skip
    };
    var keys = Object.keys(globals);
    keys.forEach(function (key) {
        global[key] = globals[key];
    });
};
export var rootSuite = function () { return root; };
//# sourceMappingURL=Globals.js.map