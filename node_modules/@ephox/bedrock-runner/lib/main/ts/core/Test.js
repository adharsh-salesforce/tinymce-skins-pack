var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as Runnable from './Runnable';
import { getFullTitle } from './Utils';
export var createTest = function (title, fn, parent) {
    var runnable = Runnable.createRunnable(title, fn);
    var test = __assign(__assign({}, runnable), { parent: parent, _only: false, setResult: function (state, e) {
            runnable.setResult(state, e);
            test.error = e;
        }, isSkipped: function () {
            return runnable.isSkipped() || (parent === null || parent === void 0 ? void 0 : parent.isSkipped()) === true;
        }, fullTitle: function () { return getFullTitle(test, '-'); } });
    return test;
};
//# sourceMappingURL=Test.js.map