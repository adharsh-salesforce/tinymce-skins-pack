import { SkipError } from '../errors/Errors';
export var createRunnable = function (title, fn) {
    var retries = -1;
    var timeout = -1;
    var slow = 75;
    var state = "notrun" /* NotRun */;
    var listeners = {};
    var fireChange = function (type, value) {
        if (listeners.hasOwnProperty(type)) {
            listeners[type].forEach(function (listener) {
                listener(value);
            });
        }
    };
    var runnable = {
        fn: fn,
        title: title,
        isFailed: function () { return state === "failed" /* Failed */; },
        isSkipped: function () { return state === "skipped" /* Skipped */; },
        isPassed: function () { return state === "passed" /* Passed */; },
        setResult: function (s, e) {
            state = s;
            runnable.error = e;
        },
        skip: function () {
            throw new SkipError('skip manually called');
        },
        retries: function (retry) {
            if (retry !== undefined) {
                fireChange('retries', retry);
                retries = retry;
                return runnable;
            }
            else {
                return retries;
            }
        },
        slow: function (ms) {
            if (ms !== undefined) {
                fireChange('slow', ms);
                slow = ms;
                return runnable;
            }
            else {
                return slow;
            }
        },
        timeout: function (ms) {
            if (ms !== undefined) {
                fireChange('timeout', ms);
                timeout = ms;
                return runnable;
            }
            else {
                return timeout;
            }
        },
        _onChange: function (type, callback) {
            if (!listeners.hasOwnProperty(type)) {
                listeners[type] = new Set();
            }
            listeners[type].add(callback);
            return function () {
                listeners[type].delete(callback);
            };
        }
    };
    return runnable;
};
//# sourceMappingURL=Runnable.js.map