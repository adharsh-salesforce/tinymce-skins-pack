import Promise from '@ephox/wrap-promise-polyfill';
import sourceMappedStackTrace from 'sourcemapped-stacktrace';
// eslint-disable-next-line @typescript-eslint/no-empty-function
export var noop = function () { };
export var makeQueryParams = function (session, offset, failed, skipped, retry) {
    if (offset > 0 || retry > 0 || skipped > 0) {
        var rt = (retry > 0 ? '&retry=' + retry : '');
        var sk = (skipped > 0 ? '&skipped=' + skipped : '');
        return '?session=' + session + '&offset=' + offset + '&failed=' + failed + sk + rt;
    }
    else {
        return '';
    }
};
export var makeUrl = function (session, offset, failed, skipped, retry) {
    var baseUrl = window.location.protocol + '//' + window.location.host + window.location.pathname;
    return baseUrl + makeQueryParams(session, offset, failed, skipped, retry);
};
export var formatElapsedTime = function (start, end) {
    var millis = end.getTime() - start.getTime();
    var seconds = Math.floor(millis / 1000);
    var point = Math.floor(millis - (seconds * 1000) / 100);
    var printable = point < 10 ? '00' + point :
        point < 100 ? '0' + point :
            '' + point;
    return seconds + '.' + printable + 's';
};
export var getFullTitle = function (suiteOrTest, separator) {
    var _a;
    var parentTitle = (_a = suiteOrTest.parent) === null || _a === void 0 ? void 0 : _a.fullTitle();
    if (parentTitle !== undefined && parentTitle.length > 0) {
        return "".concat(parentTitle, " ").concat(separator, " ").concat(suiteOrTest.title);
    }
    else {
        return suiteOrTest.title;
    }
};
export var makeSessionId = function () { return '' + Math.ceil((Math.random() * 100000000)); };
export var mapStackTrace = function (stack) { return new Promise(function (resolve) {
    if (stack) {
        // If the stack trace format can't be found then an Error will be thrown.
        // In that case lets just return the original stack instead.
        try {
            sourceMappedStackTrace.mapStackTrace(stack, function (stack) { return resolve(stack.join('\n')); });
        }
        catch (e) {
            resolve(stack);
        }
    }
    else {
        resolve('');
    }
}); };
export var setStack = function (error, stack) {
    try {
        error.stack = stack;
    }
    catch (err) {
        // Do nothing
    }
};
//# sourceMappingURL=Utils.js.map