import Promise from '@ephox/wrap-promise-polyfill';
import { assert } from 'chai';
import * as fc from 'fast-check';
import { describe, it } from 'mocha';
import { createSuite, createRootSuite } from '../../../main/ts/core/Suite';
import { createTest } from '../../../main/ts/core/Test';
import * as Utils from '../../../main/ts/runner/Utils';
import { noop, range } from '../TestUtils';
var setupTestSuite = function (numRoot, numChild1, numChild2) {
    var root = createRootSuite('root');
    var child1 = createSuite('child 1', root);
    var child2 = createSuite('child 2', child1);
    var rootTests = range(numRoot, function (i) { return createTest("test ".concat(i), noop); });
    var child1Tests = range(numChild1, function (i) { return createTest("child 1 test ".concat(i), noop); });
    var child2Tests = range(numChild2, function (i) { return createTest("child 2 test ".concat(i), noop); });
    root.suites = [child1];
    child1.suites = [child2];
    root.tests = rootTests;
    child1.tests = child1Tests;
    child2.tests = child2Tests;
    return {
        root: root,
        child1: child1,
        child2: child2,
        rootTests: rootTests,
        child1Tests: child1Tests,
        child2Tests: child2Tests
    };
};
describe('Utils.countTests', function () {
    var populateTests = function (name, suite, count) {
        for (var i = 0; i < count; i++) {
            suite.tests.push(createTest(name, noop, suite));
        }
    };
    it('should work with nested suites', function () {
        fc.assert(fc.property(fc.integer(0, 10), fc.integer(0, 10), function (numRootTests, numNestedTests) {
            var root = createRootSuite('root');
            var nested = createSuite('nested', root);
            root.suites.push(nested);
            populateTests('root test', root, numRootTests);
            populateTests('nested test', nested, numNestedTests);
            assert.equal(Utils.countTests(root), numRootTests + numNestedTests);
        }));
    });
});
describe('Utils.loop', function () {
    it('should execute each item in order', function () {
        return fc.assert(fc.asyncProperty(fc.array(fc.anything({ values: [fc.integer(), fc.string(), fc.boolean()] })), function (items) {
            var stack = [];
            return Utils.loop(items, function (item) {
                stack.push(item);
                return Promise.resolve();
            }).then(function () {
                assert.sameMembers(stack, items);
            });
        }));
    });
});
describe('Utils.getTests', function () {
    it('should find nested tests, while ensuring the run order is maintained', function () {
        fc.assert(fc.property(fc.nat(50), fc.nat(50), fc.nat(50), function (numRoot, numChild1, numChild2) {
            var _a = setupTestSuite(numRoot, numChild1, numChild2), root = _a.root, child1 = _a.child1, child2 = _a.child2, rootTests = _a.rootTests, child1Tests = _a.child1Tests, child2Tests = _a.child2Tests;
            var result1 = Utils.getTests(root);
            assert.lengthOf(result1, numRoot + numChild1 + numChild2, 'number of tests from root suite');
            assert.sameOrderedMembers(result1, rootTests.concat(child1Tests, child2Tests), 'tests from root suite');
            var result2 = Utils.getTests(child1);
            assert.lengthOf(result2, numChild1 + numChild2, 'number of tests from child suite 1');
            assert.sameOrderedMembers(result2, child1Tests.concat(child2Tests), 'tests from child suite 1');
            var result3 = Utils.getTests(child2);
            assert.lengthOf(result3, numChild2, 'number of tests from child suite 2');
            assert.sameOrderedMembers(result3, child2Tests, 'tests from child suite 2');
        }));
    }).slow(150);
});
describe('Utils.getSuites', function () {
    it('should find nested suites, while ensuring the run order is maintained', function () {
        var _a = setupTestSuite(1, 1, 1), root = _a.root, child1 = _a.child1, child2 = _a.child2;
        var result1 = Utils.getSuites(root);
        assert.lengthOf(result1, 2, 'number of suites from root suite');
        assert.sameOrderedMembers(result1, [child1, child2], 'suites from root suite');
        var result2 = Utils.getSuites(child1);
        assert.lengthOf(result2, 1, 'number of suites from child suite 1');
        assert.sameOrderedMembers(result2, [child2], 'suites from child suite 1');
        var result3 = Utils.getSuites(child2);
        assert.lengthOf(result3, 0, 'number of suites from child suite 2');
        assert.sameOrderedMembers(result3, [], 'suites from child suite 2');
    }).slow(150);
});
describe('Utils.filterOnly', function () {
    it('should remove all other tests/suites for only test', function () {
        fc.assert(fc.property(fc.nat(50), fc.integer(1, 50), fc.integer(1, 50), function (numRoot, numChild1, numChild2) {
            var _a = setupTestSuite(numRoot, numChild1, numChild2), root = _a.root, child1 = _a.child1, child2 = _a.child2, child2Tests = _a.child2Tests;
            var randomTestNum = Math.floor(Math.random() * numChild2);
            var randomTest = child2Tests[randomTestNum];
            randomTest._only = true;
            Utils.filterOnly(root);
            assert.lengthOf(child2.tests, 1);
            assert.lengthOf(child2.suites, 0);
            assert.lengthOf(child1.tests, 0);
            assert.lengthOf(child1.suites, 1);
            assert.lengthOf(root.tests, 0);
            assert.lengthOf(root.suites, 1);
        }));
    });
    it('should remove all nested suites for only test', function () {
        fc.assert(fc.property(fc.nat(50), fc.integer(1, 50), fc.integer(1, 50), function (numRoot, numChild1, numChild2) {
            var _a = setupTestSuite(numRoot, numChild1, numChild2), root = _a.root, child1 = _a.child1, child1Tests = _a.child1Tests;
            var randomTestNum = Math.floor(Math.random() * numChild1);
            var randomTest = child1Tests[randomTestNum];
            randomTest._only = true;
            Utils.filterOnly(root);
            assert.lengthOf(child1.tests, 1);
            assert.lengthOf(child1.suites, 0);
            assert.lengthOf(root.tests, 0);
            assert.lengthOf(root.suites, 1);
        }));
    });
    it('should remove all other suites for only suite', function () {
        fc.assert(fc.property(fc.nat(50), fc.integer(1, 50), fc.integer(1, 50), function (numRoot, numChild1, numChild2) {
            var _a = setupTestSuite(numRoot, numChild1, numChild2), root = _a.root, child1 = _a.child1, child2 = _a.child2;
            child1._only = true;
            Utils.filterOnly(root);
            assert.lengthOf(child2.tests, numChild2);
            assert.lengthOf(child2.suites, 0);
            assert.lengthOf(child1.tests, numChild1);
            assert.lengthOf(child1.suites, 1);
            assert.lengthOf(root.tests, 0);
            assert.lengthOf(root.suites, 1);
        }));
    });
});
//# sourceMappingURL=UtilsTest.js.map