import { assert } from 'chai';
import { afterEach, beforeEach, describe, it } from 'mocha';
import * as Globals from '../../../main/ts/core/Globals';
import { noop } from '../TestUtils';
var last = function (items) {
    return items[items.length - 1];
};
describe('Globals.setup', function () {
    var rootSuite = Globals.rootSuite();
    var mockGlobals;
    beforeEach(function () {
        mockGlobals = {};
        Globals.setup(mockGlobals);
    });
    afterEach(function () {
        rootSuite.suites = [];
        rootSuite.tests = [];
    });
    it('should allow describes', function () {
        var _a, _b;
        mockGlobals.describe('describe suite', noop);
        assert.lengthOf(rootSuite.suites, 1);
        assert.equal((_a = last(rootSuite.suites)) === null || _a === void 0 ? void 0 : _a.title, 'describe suite');
        mockGlobals.context('context suite', noop);
        assert.lengthOf(rootSuite.suites, 2);
        assert.equal((_b = last(rootSuite.suites)) === null || _b === void 0 ? void 0 : _b.title, 'context suite');
    });
    it('should allow nested describes', function () {
        mockGlobals.describe('parent', function () {
            mockGlobals.describe('child', noop);
        });
        assert.lengthOf(rootSuite.suites, 1);
        var parentSuite = rootSuite.suites[0];
        assert.equal(parentSuite.title, 'parent');
        assert.equal(parentSuite.parent, rootSuite);
        assert.lengthOf(parentSuite.suites, 1);
        var childSuite = parentSuite.suites[0];
        assert.equal(childSuite.title, 'child');
        assert.equal(childSuite.parent, parentSuite);
    });
    it('should allow hooks to be configured', function () {
        mockGlobals.describe('test', function () {
            mockGlobals.before(noop);
            mockGlobals.beforeEach(noop);
            mockGlobals.after(noop);
            mockGlobals.afterEach(noop);
        });
        var suite = rootSuite.suites[0];
        assert.lengthOf(suite.hooks["before" /* Before */], 1);
        assert.lengthOf(suite.hooks["beforeEach" /* BeforeEach */], 1);
        assert.lengthOf(suite.hooks["after" /* After */], 1);
        assert.lengthOf(suite.hooks["afterEach" /* AfterEach */], 1);
        assert.equal(suite.hooks["before" /* Before */][0].title, 'before');
        assert.equal(suite.hooks["beforeEach" /* BeforeEach */][0].title, 'beforeEach');
        assert.equal(suite.hooks["after" /* After */][0].title, 'after');
        assert.equal(suite.hooks["afterEach" /* AfterEach */][0].title, 'afterEach');
    });
    it('should allow hooks with titles to be configured', function () {
        mockGlobals.describe('test', function () {
            mockGlobals.before('test before', noop);
            mockGlobals.beforeEach('test beforeEach', noop);
            mockGlobals.after('test after', noop);
            mockGlobals.afterEach('test afterEach', noop);
        });
        var suite = rootSuite.suites[0];
        assert.lengthOf(suite.hooks["before" /* Before */], 1);
        assert.lengthOf(suite.hooks["beforeEach" /* BeforeEach */], 1);
        assert.lengthOf(suite.hooks["after" /* After */], 1);
        assert.lengthOf(suite.hooks["afterEach" /* AfterEach */], 1);
        assert.equal(suite.hooks["before" /* Before */][0].title, 'before: test before');
        assert.equal(suite.hooks["beforeEach" /* BeforeEach */][0].title, 'beforeEach: test beforeEach');
        assert.equal(suite.hooks["after" /* After */][0].title, 'after: test after');
        assert.equal(suite.hooks["afterEach" /* AfterEach */][0].title, 'afterEach: test afterEach');
    });
    it('should allow tests', function () {
        mockGlobals.describe('root', function () {
            mockGlobals.it('it test', noop);
            mockGlobals.specify('specify test', noop);
        });
        assert.lengthOf(rootSuite.suites, 1);
        var suite = rootSuite.suites[0];
        assert.lengthOf(suite.tests, 2);
        var itTest = suite.tests[0];
        assert.equal(itTest.title, 'it test');
        assert.equal(itTest.parent, suite);
        assert.isFunction(itTest.fn);
        var specifyTest = suite.tests[1];
        assert.equal(specifyTest.title, 'specify test');
        assert.equal(specifyTest.parent, suite);
        assert.isFunction(specifyTest.fn);
    });
    it('handles hooks with an undefined title', function () {
        mockGlobals.describe('test', function () {
            // Note: We don't allow this via TypeScript, but mocha does handle it so we need to cast the undefined
            mockGlobals.before(undefined, noop);
        });
        var suite = rootSuite.suites[0];
        assert.lengthOf(suite.hooks["before" /* Before */], 1);
        assert.equal(suite.hooks["before" /* Before */][0].title, 'before');
    });
});
//# sourceMappingURL=GlobalsTest.js.map