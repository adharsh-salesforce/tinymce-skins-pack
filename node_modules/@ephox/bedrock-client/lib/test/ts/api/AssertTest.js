import { Testable } from '@ephox/dispute';
import * as chai from 'chai';
import * as fc from 'fast-check';
import { describe, it } from 'mocha';
import { Assert } from '../../../main/ts/api/Main';
var tArray = Testable.tArray, tString = Testable.tString;
describe('Assert.eq', function () {
    it('does not throw when assertion passes', function () {
        fc.assert(fc.property(fc.integer(), function (i) {
            Assert.eq('blah', i, i);
            return true;
        }));
        fc.assert(fc.property(fc.array(fc.string()), function (xs) {
            Assert.eq('blah', xs, xs);
            Assert.eq('blah', xs, xs.slice());
            Assert.eq('blah', xs, xs.slice(), tArray(tString));
            return true;
        }));
    });
    it('throws when assertion fails', function () {
        Assert.throws('throws', function () {
            Assert.eq('blah', 'a', 'b');
        });
    });
    it('throws a PprintAssertionError', function () {
        try {
            Assert.eq('blah', 'a', 'b');
        }
        catch (e) {
            var ee = e;
            chai.assert.deepEqual(ee.message, 'blah');
            chai.assert.deepEqual(ee.diff.actual, '"b"');
            chai.assert.deepEqual(ee.diff.expected, '"a"');
        }
    });
});
//# sourceMappingURL=AssertTest.js.map