"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const fc = require("fast-check");
const mocha_1 = require("mocha");
const Imports_1 = require("../../../main/ts/bedrock/compiler/Imports");
const validPolyfills = ['ArrayBuffer', 'Map', 'Object', 'Promise', 'Set', 'Symbol', 'TypedArray', 'WeakMap', 'WeakSet'];
const convertPolyfillName = (name) => {
    return name.slice(0, 1).toLowerCase() +
        name.slice(1).replace(/[A-Z]/g, (letter) => `-${letter.toLowerCase()}`);
};
const withGenerateFilenames = (useRequire, extension, test) => {
    fc.assert(fc.property(fc.array(fc.hexaString(1, 20), 50), (filenames) => {
        const filepaths = filenames.map((name) => `/${name}.${extension}`);
        const imports = (0, Imports_1.generateImports)(useRequire, `/scratch.${extension}`, filepaths, []);
        test(imports, filenames);
    }));
};
(0, mocha_1.describe)('Imports.generateImports', () => {
    context('TypeScript', () => {
        (0, mocha_1.it)('should include the specified test files (require)', () => {
            withGenerateFilenames(true, 'ts', (imports, filenames) => {
                filenames.forEach((filename) => {
                    chai_1.assert.include(imports, `
__currentTestFile = "/${filename}.ts";
require("${filename}.ts");
addTest("/${filename}.ts");`);
                });
            });
        });
        (0, mocha_1.it)('should include the specified test files (import)', () => {
            withGenerateFilenames(false, 'ts', (imports, filenames) => {
                filenames.forEach((filename) => {
                    chai_1.assert.include(imports, `
__currentTestFile = "/${filename}.ts";
import "${filename}.ts";
addTest("/${filename}.ts");`);
                });
            });
        });
    });
    context('JavaScript', () => {
        (0, mocha_1.it)('should include the specified test files (require)', () => {
            withGenerateFilenames(true, 'js', (imports, filenames) => {
                filenames.forEach((filename) => {
                    chai_1.assert.include(imports, `
__currentTestFile = "/${filename}.js";
require("${filename}.js");
addTest("/${filename}.js");`);
                });
            });
        });
        (0, mocha_1.it)('should include the specified test files (import)', () => {
            withGenerateFilenames(false, 'js', (imports, filenames) => {
                filenames.forEach((filename) => {
                    chai_1.assert.include(imports, `
__currentTestFile = "/${filename}.js";
import "${filename}.js";
addTest("/${filename}.js");`);
                });
            });
        });
    });
    context('ESM', () => {
        (0, mocha_1.it)('should include the specified test files (require)', () => {
            withGenerateFilenames(true, 'mjs', (imports, filenames) => {
                filenames.forEach((filename) => {
                    chai_1.assert.include(imports, `
__currentTestFile = "/${filename}.mjs";
require("${filename}.mjs");
addTest("/${filename}.mjs");`);
                });
            });
        });
        (0, mocha_1.it)('should include the specified test files (import)', () => {
            withGenerateFilenames(false, 'mjs', (imports, filenames) => {
                filenames.forEach((filename) => {
                    chai_1.assert.include(imports, `
__currentTestFile = "/${filename}.mjs";
import "${filename}.mjs";
addTest("/${filename}.mjs");`);
                });
            });
        });
    });
    (0, mocha_1.it)('should include an error catcher for imports', () => {
        const imports = (0, Imports_1.generateImports)(true, '/scratch.ts', [], []);
        chai_1.assert.include(imports, 'window.addEventListener(\'error\', importErrorHandler);');
        chai_1.assert.include(imports, 'window.removeEventListener(\'error\', importErrorHandler);');
    });
    (0, mocha_1.it)('should include the specified polyfills (require)', () => {
        fc.assert(fc.property(fc.array(fc.constantFrom(...validPolyfills)), (polyfills) => {
            const imports = (0, Imports_1.generateImports)(true, '/scratch.ts', [], polyfills);
            polyfills.forEach((polyfill) => {
                chai_1.assert.include(imports, `require('core-js/es/${convertPolyfillName(polyfill)}');`);
            });
        }));
    });
    (0, mocha_1.it)('should include the specified polyfills (import)', () => {
        fc.assert(fc.property(fc.array(fc.constantFrom(...validPolyfills)), (polyfills) => {
            const imports = (0, Imports_1.generateImports)(false, '/scratch.ts', [], polyfills);
            polyfills.forEach((polyfill) => {
                chai_1.assert.include(imports, `import 'core-js/es/${convertPolyfillName(polyfill)}';`);
            });
        }));
    });
});
(0, mocha_1.describe)('Imports.convertPolyfillNameToPath', () => {
    (0, mocha_1.it)('should convert polyfill names to import paths', () => {
        chai_1.assert.equal((0, Imports_1.convertPolyfillNameToPath)('ArrayBuffer'), 'core-js/es/array-buffer');
        chai_1.assert.equal((0, Imports_1.convertPolyfillNameToPath)('Object'), 'core-js/es/object');
        chai_1.assert.equal((0, Imports_1.convertPolyfillNameToPath)('Promise'), 'core-js/es/promise');
        chai_1.assert.equal((0, Imports_1.convertPolyfillNameToPath)('Symbol'), 'core-js/es/symbol');
        chai_1.assert.equal((0, Imports_1.convertPolyfillNameToPath)('WeakMap'), 'core-js/es/weak-map');
        chai_1.assert.equal((0, Imports_1.convertPolyfillNameToPath)('WeakSet'), 'core-js/es/weak-set');
    });
    (0, mocha_1.it)('should convert PascalCase names to hyphen case and prefix `core-js/es/`', () => {
        fc.assert(fc.property(fc.char().filter((c) => /[a-zA-Z]/.test(c)), fc.string(), fc.string(), (char, word1, word2) => {
            const singleWord = char.toUpperCase() + word1.toLowerCase();
            const multiWord = char.toUpperCase() + word2.toLowerCase() + singleWord;
            const expectedSinglePath = char.toLowerCase() + word1.toLowerCase();
            chai_1.assert.equal((0, Imports_1.convertPolyfillNameToPath)(singleWord), `core-js/es/${expectedSinglePath}`, 'single word path');
            const expectedMultiPath = char.toLowerCase() + word2.toLowerCase() + '-' + expectedSinglePath;
            chai_1.assert.equal((0, Imports_1.convertPolyfillNameToPath)(multiWord), `core-js/es/${expectedMultiPath}`, 'multiple word path');
        }));
    });
});
//# sourceMappingURL=ImportsTest.js.map