"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mode = exports.go = void 0;
const chalk = require("chalk");
const Serve = require("./bedrock/server/Serve");
const Attempt_1 = require("./bedrock/core/Attempt");
const Version = require("./bedrock/core/Version");
const RunnerRoutes = require("./bedrock/server/RunnerRoutes");
const Reporter = require("./bedrock/core/Reporter");
const DriverMaster = require("./bedrock/server/DriverMaster");
const Driver = require("./bedrock/auto/Driver");
const Lifecycle = require("./bedrock/core/Lifecycle");
const ExitCodes_1 = require("./bedrock/util/ExitCodes");
const ConsoleReporter = require("./bedrock/core/ConsoleReporter");
const SettingsResolver = require("./bedrock/core/SettingsResolver");
const go = (bedrockAutoSettings) => {
    console.log('bedrock-auto ' + Version.get() + ' starting...');
    const settings = SettingsResolver.resolveAndLog(bedrockAutoSettings);
    const master = DriverMaster.create();
    const browserName = settings.browser.replace('-headless', '');
    const isPhantom = browserName === 'phantomjs';
    const isHeadless = settings.browser.endsWith('-headless') || isPhantom;
    const basePage = 'src/resources/html/' + (isPhantom ? 'bedrock-phantom.html' : 'bedrock.html');
    const routes = RunnerRoutes.generate('auto', settings.projectdir, settings.basedir, settings.config, settings.bundler, settings.testfiles, settings.chunk, settings.retries, settings.singleTimeout, settings.stopOnFailure, basePage, settings.coverage, settings.polyfills);
    routes.then(async (runner) => {
        const driver = await Driver.create({
            browser: browserName,
            basedir: settings.basedir,
            headless: isHeadless,
            debuggingPort: settings.debuggingPort,
            useSandboxForHeadless: settings.useSandboxForHeadless,
            extraBrowserCapabilities: settings.extraBrowserCapabilities,
            verbose: settings.verbose,
            wipeBrowserCache: settings.wipeBrowserCache
        });
        const webdriver = driver.webdriver;
        const service = await Serve.start({
            ...settings,
            driver: Attempt_1.Attempt.passed(webdriver),
            master,
            runner,
            stickyFirstSession: true
        });
        const shutdown = () => Promise.all([service.shutdown(), driver.shutdown()]);
        try {
            if (!isHeadless) {
                console.log('bedrock-auto ' + Version.get() + ' available at: http://localhost:' + service.port);
            }
            await webdriver.url('http://localhost:' + service.port);
            console.log(isPhantom ? '\nPhantom tests loading ...\n' : '\nInitial page has loaded ...\n');
            service.markLoaded();
            service.enableHud();
            const result = await service.awaitDone().then((data) => {
                ConsoleReporter.printReport(data);
                return Reporter.write(settings, data);
            }, (data) => {
                ConsoleReporter.printReport(data);
                return Reporter.writePollExit(settings, data);
            });
            return Lifecycle.done(result, webdriver, shutdown, settings.gruntDone, settings.delayExit);
        }
        catch (e) {
            return Lifecycle.error(e, webdriver, shutdown, settings.gruntDone, settings.delayExit);
        }
    }).catch((err) => {
        console.error(chalk.red(err));
        Lifecycle.exit(settings.gruntDone, ExitCodes_1.ExitCodes.failures.unexpected);
    });
};
exports.go = go;
exports.mode = 'forAuto';
//# sourceMappingURL=BedrockAuto.js.map