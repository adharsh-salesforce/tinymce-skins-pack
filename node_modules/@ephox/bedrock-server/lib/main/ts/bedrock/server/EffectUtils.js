"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.performActionOnTarget = exports.getTarget = void 0;
const frameSelected = (driver, frame) => async () => {
    try {
        await driver.switchToFrame(frame);
        return true;
    }
    catch (e) {
        if (!(e.name && e.name === 'no such frame')) {
            throw e;
        }
        return false;
    }
};
const getTargetFromFrame = async (driver, selector) => {
    const sections = selector.split('=>');
    const frameSelector = sections[0];
    const targetSelector = sections[1];
    // Note: Don't use driver.$() here to lookup the frame as the object reference
    // returned doesn't work when passed to driver.switchToFrame() on Edge.
    const frame = await driver.findElement('css selector', frameSelector);
    await driver.waitUntil(frameSelected(driver, frame), { timeout: 500 });
    const target = await driver.$(targetSelector);
    await target.waitForDisplayed({ timeout: 500 });
    return target;
};
const performActionOnFrame = async (driver, selector, action) => {
    try {
        const target = await getTargetFromFrame(driver, selector);
        const result = await action(target);
        await driver.switchToFrame(null);
        return result;
    }
    catch (err) {
        await driver.switchToFrame(null);
        return Promise.reject(err);
    }
};
const getTargetFromMain = async (driver, selector) => {
    return driver.$(selector);
};
const performActionOnMain = async (driver, selector, action) => {
    const target = await getTargetFromMain(driver, selector);
    return action(target);
};
const getTarget = (driver, data) => {
    const selector = data.selector;
    const getter = selector.indexOf('=>') > -1 ? getTargetFromFrame : getTargetFromMain;
    return getter(driver, selector);
};
exports.getTarget = getTarget;
const performActionOnTarget = (driver, data, action) => {
    const selector = data.selector;
    const performer = selector.indexOf('=>') > -1 ? performActionOnFrame : performActionOnMain;
    return performer(driver, selector, action);
};
exports.performActionOnTarget = performActionOnTarget;
//# sourceMappingURL=EffectUtils.js.map