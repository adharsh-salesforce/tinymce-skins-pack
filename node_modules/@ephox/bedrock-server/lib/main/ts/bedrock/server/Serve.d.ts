import * as http from 'http';
import { Browser } from 'webdriverio';
import { Attempt } from '../core/Attempt';
import * as Routes from './Routes';
import { DriverMaster } from './DriverMaster';
import { TestResults } from './Controller';
interface Server {
    readonly start: () => Promise<void>;
    readonly stop: () => Promise<void>;
}
export interface ServeSettings {
    readonly basedir: string;
    readonly customRoutes: string | undefined;
    readonly driver: Attempt<string, Browser<'async'>>;
    readonly loglevel: 'simple' | 'advanced';
    readonly master: DriverMaster | null;
    readonly overallTimeout: number;
    readonly projectdir: string;
    readonly runner: Routes.Runner;
    readonly singleTimeout: number;
    readonly skipResetMousePosition: boolean;
    readonly stickyFirstSession: boolean;
    readonly testfiles: string[];
}
export interface ServeService {
    readonly port: number;
    readonly markLoaded: () => void;
    readonly enableHud: () => void;
    readonly awaitDone: () => Promise<TestResults>;
    readonly shutdown: () => Promise<void>;
}
export declare const startCustom: (settings: ServeSettings, createServer: (port: number, listener: http.RequestListener) => Server) => Promise<ServeService>;
export declare const start: (settings: ServeSettings) => Promise<ServeService>;
export {};
