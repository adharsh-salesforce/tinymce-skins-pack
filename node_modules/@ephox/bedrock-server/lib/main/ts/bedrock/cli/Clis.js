"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logAndExit = exports.forManual = exports.forAuto = void 0;
const chalk = require("chalk");
const cli = require("./Cli");
const ClOptions = require("./ClOptions");
const ExitCodes_1 = require("../util/ExitCodes");
// Keep this file consistent with Settings.ts
const commonOptions = (directories) => {
    return [
        ClOptions.projectdir(directories.current),
        ClOptions.basedir(directories.bin),
        ClOptions.overallTimeout,
        ClOptions.singleTimeout,
        ClOptions.customRoutes,
        ClOptions.chunk,
        ClOptions.help,
        ClOptions.logging,
        ClOptions.version,
        ClOptions.bundler,
        ClOptions.config,
        ClOptions.files,
        ClOptions.testdir,
        ClOptions.testdirs,
        ClOptions.coverage,
        ClOptions.polyfills,
        ClOptions.bucket,
        ClOptions.buckets,
        ClOptions.stopOnFailure,
        ClOptions.verbose
    ];
};
const forAuto = (directories, argv = process.argv) => {
    return cli.extract('bedrock-auto', 'Use a Webdriver to launch a browser and run tests against it', commonOptions(directories).concat([
        ClOptions.browser,
        ClOptions.name,
        ClOptions.output,
        ClOptions.debuggingPort,
        ClOptions.retries,
        ClOptions.delayExiting,
        ClOptions.useSandboxForHeadless,
        ClOptions.extraBrowserCapabilities,
        ClOptions.skipResetMousePosition,
        ClOptions.wipeBrowserCache
    ]), argv);
};
exports.forAuto = forAuto;
const forManual = (directories, argv = process.argv) => {
    return cli.extract('bedrock', 'Launch a testing process on a localhost port and allow the user to navigate to it in any browser', commonOptions(directories), argv);
};
exports.forManual = forManual;
const logAndExit = (errs) => {
    console.error(chalk.red('\n****\nError while processing command line for ' + errs.command));
    const messages = errs.errors.join('\n');
    console.error(chalk.red(messages));
    console.error(chalk.red('Use ' + errs.command + ' --help to print usage\n****\n'));
    process.exit(ExitCodes_1.ExitCodes.failures.cli);
};
exports.logAndExit = logAndExit;
//# sourceMappingURL=Clis.js.map