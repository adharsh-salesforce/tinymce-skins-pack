"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.error = exports.done = exports.exit = void 0;
const chalk = require("chalk");
const ExitCodes_1 = require("../util/ExitCodes");
const Attempt_1 = require("./Attempt");
const exitDelay = (driver, delayExiting) => {
    // 17 minutes should be enough, if it's not we can make this configurable later.
    return delayExiting ? driver.pause(17 * 60 * 1000) : Promise.resolve();
};
const exit = (gruntDone, exitCode) => {
    if (gruntDone !== undefined) {
        gruntDone(exitCode === 0);
    }
    else {
        process.exit(exitCode);
    }
};
exports.exit = exit;
const done = async (result, driver, shutdown, gruntDone, delayExiting) => {
    // Only delay exiting if tests failed.
    const exitCode = await Attempt_1.Attempt.cata(result, async (errs) => {
        await exitDelay(driver, delayExiting);
        console.log(chalk.red(errs.join('\n')));
        return ExitCodes_1.ExitCodes.failures.tests;
    }, async () => {
        console.log(chalk.green('All tests passed.'));
        return ExitCodes_1.ExitCodes.success;
    });
    await shutdown();
    (0, exports.exit)(gruntDone, exitCode);
};
exports.done = done;
const error = async (err, driver, shutdown, gruntDone, delayExiting) => {
    await exitDelay(driver, delayExiting);
    console.error(chalk.red('********** Unexpected Bedrock Error -> Server Quitting **********'));
    console.error(err);
    await shutdown();
    (0, exports.exit)(gruntDone, ExitCodes_1.ExitCodes.failures.unexpected);
};
exports.error = error;
//# sourceMappingURL=Lifecycle.js.map