import { assert } from 'chai';
import * as fc from 'fast-check';
import { describe, it } from 'mocha';
import * as TestLogs from '../../../main/ts/api/TestLogs';
import * as Failure from '../../../main/ts/api/Failure';
describe('Failure.prepFailure', function () {
    it('should convert a test label to an Error', function () {
        fc.assert(fc.property(fc.string(), function (str) {
            var err = Failure.prepFailure(str);
            assert.typeOf(err, 'Error');
            assert.equal(err.message, str);
            assert.notInclude(err.stack, 'at normalizeError');
            assert.lengthOf(err.logs, 0);
        }));
    });
    it('should convert a thunked test label to an Error', function () {
        fc.assert(fc.property(fc.string(), function (str) {
            var err = Failure.prepFailure(function () { return str; });
            assert.typeOf(err, 'Error');
            assert.equal(err.message, str);
            assert.notInclude(err.stack, 'at normalizeError');
            assert.lengthOf(err.logs, 0);
        }));
    });
    it('should convert an AssertionError object to an actual Error', function () {
        try {
            assert.fail('Test failure');
        }
        catch (e) {
            var err = Failure.prepFailure(e);
            assert.typeOf(err, 'Error');
            assert.equal(err.name, 'AssertionError');
            assert.equal(err.message, e.message);
            assert.equal(err.stack, e.stack);
            assert.lengthOf(err.logs, 0);
        }
    });
    it('should format logs', function () {
        fc.assert(fc.property(fc.string(), fc.string(), fc.string(), fc.string(), function (str, logMessage1, logMessage2, logMessage3) {
            var log1 = TestLogs.createLogEntry(logMessage1);
            var log2 = TestLogs.createLogEntry(logMessage2);
            var log3 = TestLogs.createLogEntry(logMessage3);
            var logs = TestLogs.init();
            log1.entries.push(log2);
            logs.history.push(log1, log3);
            var err = Failure.prepFailure(new Error(str), logs);
            assert.typeOf(err, 'Error');
            assert.equal(err.message, str);
            assert.equal(err.logs.join('\n'), "  *  ".concat(logMessage1, "\n    *  ").concat(logMessage2, "\n  *  ").concat(logMessage3));
        }));
    });
    it('should format logs with stack trace', function () {
        fc.assert(fc.property(fc.string(), fc.string(), function (str, logMessage) {
            var error = new Error(str);
            var log = TestLogs.createLogEntry(logMessage);
            log.trace = error.stack;
            var logs = TestLogs.init();
            logs.history.push(log);
            var err = Failure.prepFailure(error, logs);
            assert.typeOf(err, 'Error');
            assert.equal(err.message, str);
            assert.equal(err.logs.join('\n'), "  *  ".concat(logMessage, "\n\n\n").concat(error.stack));
        }));
    });
});
//# sourceMappingURL=FailureTest.js.map