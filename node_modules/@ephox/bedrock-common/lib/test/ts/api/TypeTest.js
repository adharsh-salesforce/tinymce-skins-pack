import { assert } from 'chai';
import * as fc from 'fast-check';
import { describe, it } from 'mocha';
import * as Type from '../../../main/ts/api/Type';
describe('Type.typeOf', function () {
    it('is "string" for strings', function () {
        fc.assert(fc.property(fc.string(), function (str) {
            assert.equal(Type.typeOf(str), 'string');
        }));
    });
    it('is "number" for numbers', function () {
        fc.assert(fc.property(fc.float(), function (num) {
            assert.equal(Type.typeOf(num), 'number');
        }));
    });
    it('is "array" for arrays', function () {
        fc.assert(fc.property(fc.array(fc.anything()), function (arr) {
            assert.equal(Type.typeOf(arr), 'array');
        }));
    });
    it('is "boolean" for bools', function () {
        fc.assert(fc.property(fc.boolean(), function (bool) {
            assert.equal(Type.typeOf(bool), 'boolean');
        }));
    });
    it('is "object" for object', function () {
        fc.assert(fc.property(fc.object(), function (obj) {
            assert.equal(Type.typeOf(obj), 'object');
        }));
    });
    it('is "null" for null', function () {
        assert.equal(Type.typeOf(null), 'null');
    });
    it('is "undefined" for undefined', function () {
        assert.equal(Type.typeOf(undefined), 'undefined');
    });
});
//# sourceMappingURL=TypeTest.js.map