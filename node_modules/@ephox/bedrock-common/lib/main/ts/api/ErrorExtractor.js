var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as Differ from './Differ';
import * as TestError from './TestError';
var stringify = function (e) {
    if (e === undefined) {
        return 'undefined';
    }
    else if (typeof e === 'string') {
        return e;
    }
    else {
        return JSON.stringify(e);
    }
};
var extractError = function (err) {
    return err === undefined ? new Error('no error given') : err;
};
var extractStack = function (e) {
    if (e.stack) {
        return e.stack.split('\n')
            .filter(function (line) { return line.indexOf('at') !== -1; })
            .join('\n');
    }
    else {
        return '';
    }
};
var extractErrorData = function (e) {
    var actual = e.diff.actual;
    var expected = e.diff.expected;
    var comparison = TestError.isHTMLDiffError(e) ? e.diff.comparison : Differ.diffPrettyText(actual, expected);
    return ({
        type: e.name,
        message: "Test failure: ".concat(e.message),
        diff: {
            actual: actual,
            expected: expected,
            comparison: comparison
        }
    });
};
var extractAssertionErrorData = function (e) {
    var _a;
    var actual = stringify(e.actual);
    var expected = stringify(e.expected);
    var message = "Assertion error: ".concat((_a = e.message) !== null && _a !== void 0 ? _a : '');
    if (e.showDiff !== false) {
        return {
            type: e.name,
            message: message,
            diff: {
                expected: expected,
                actual: actual,
                comparison: Differ.diffPrettyText(actual, expected)
            }
        };
    }
    else {
        return { type: e.name, message: message };
    }
};
export var getBasicErrorData = function (e) {
    if (TestError.isHTMLDiffError(e) || TestError.isPprintAssertionError(e)) {
        return extractErrorData(e);
    }
    else if (TestError.isAssertionError(e)) {
        return extractAssertionErrorData(e);
    }
    else if (e.name && e.message) {
        return { type: 'Error', message: e.name + ': ' + e.message };
    }
    else if (e.toString !== undefined) {
        return { type: 'Error', message: String(e) };
    }
    else {
        return { type: 'Error', message: JSON.stringify(e) };
    }
};
export var getErrorData = function (err) {
    var e = extractError(err);
    var formattedLogs = err.logs && err.logs.length > 0 ? err.logs.map(function (log) { return log
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r'); }).join('\n') : undefined;
    return __assign(__assign({}, getBasicErrorData(e)), { stack: extractStack(e), logs: formattedLogs });
};
//# sourceMappingURL=ErrorExtractor.js.map