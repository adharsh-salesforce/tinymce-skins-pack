import * as ErrorExtractor from './ErrorExtractor';
import * as Differ from './Differ';
import { htmlentities } from './StringUtils';
var identity = function (val) { return val; };
/* Required to make <del> and <ins> stay as tags.*/
var processQUnit = function (html) {
    return (html
        .replace(/&lt;del&gt;/g, '<del>')
        .replace(/&lt;\/del&gt;/g, '</del>')
        .replace(/&lt;ins&gt;/g, '<ins>')
        .replace(/&lt;\/ins&gt;/g, '</ins>'));
};
var pprintExtra = function (e) {
    if (e.logs !== undefined && e.logs.length > 0) {
        return "\n\nLogs:\n".concat(e.logs);
    }
    else if (e.stack !== undefined && e.stack.length > 0) {
        return "\n\nStack:\n".concat(e.stack);
    }
    else {
        return '';
    }
};
var pprintDiff = function (e, escape, diff) {
    if (e.diff) {
        var comparison = e.type === 'HtmlAssertion' ? escape(e.diff.comparison) : undefined;
        var dh = diff(e.diff.actual, e.diff.expected, comparison);
        return "Expected:\n".concat(escape(e.diff.expected), "\nActual:\n").concat(escape(e.diff.actual), "\nDiff:\n").concat(dh);
    }
    else {
        return '';
    }
};
var pprintBasicError = function (e, escape, diff) {
    var message = escape(e.message);
    var diffMessage = pprintDiff(e, escape, diff);
    if (diffMessage.length > 0) {
        return "".concat(message, "\n").concat(diffMessage);
    }
    else {
        return message;
    }
};
var pprintError = function (e, escape, diff) {
    var message = pprintBasicError(e, escape, diff);
    var extras = escape(pprintExtra(e));
    return "".concat(message).concat(extras);
};
export var pprintAssertionError = function (e) {
    var err = ErrorExtractor.getBasicErrorData(e);
    return pprintBasicError(err, identity, Differ.diffPrettyText);
};
export var data = function (err) {
    return ErrorExtractor.getErrorData(err);
};
export var dataHtml = function (err) {
    return pprintError(err, htmlentities, function (actual, expected, comparison) {
        return comparison !== undefined ? processQUnit(comparison) : Differ.diffPrettyHtml(actual, expected);
    });
};
export var dataText = function (err) {
    return pprintError(err, identity, function (actual, expected, comparison) {
        // TODO: get rid of the <ins> and <del> in the comparison. Probably need to change the code that throws HtmlAssertionError.
        return comparison !== undefined ? comparison : Differ.diffPrettyText(actual, expected);
    });
};
export var html = function (err) {
    var e = ErrorExtractor.getErrorData(err);
    return dataHtml(e);
};
export var text = function (err) {
    var e = ErrorExtractor.getErrorData(err);
    return dataText(e);
};
//# sourceMappingURL=Reporter.js.map