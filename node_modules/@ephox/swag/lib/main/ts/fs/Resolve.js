"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.resolveId = exports.resolvePrefixPaths = exports.resolveSync = void 0;
/* eslint-disable @typescript-eslint/unbound-method */
var path = __importStar(require("path"));
var resolve_1 = __importDefault(require("resolve"));
var Fail_1 = require("../utils/Fail");
var resolveSync = function (fs, importee, importer, forceFlat) {
    var resolved = resolve_1["default"].sync(importee, {
        basedir: path.dirname(importer),
        isFile: fs.isFileSync,
        readFileSync: fs.readFileSync,
        isDirectory: fs.isDirectorySync,
        preserveSymlinks: false
    });
    if (resolved && fs.isFileSync(resolved)) {
        if (forceFlat && !isFlat(resolved)) {
            (0, Fail_1.fail)(forcedFlatMessage(importer, importee, resolved));
        }
        return fs.realpathSync(resolved);
    }
    else {
        return resolved;
    }
};
exports.resolveSync = resolveSync;
var forcedFlatMessage = function (importer, importee, resolved) { return [
    'Error non flat package structure detected:',
    ' importer: ' + importer,
    ' importee: ' + importee,
    ' resolved: ' + resolved
].join('\n'); };
var isFlat = function (id) { return id.split('/').filter(function (p) { return p === 'node_modules'; }).length < 2; };
var resolveUsingNode = function (fs, importee, importer, forceFlat) {
    return new Promise(function (fulfil, reject) {
        // console.log(importee, importer);
        (0, resolve_1["default"])(importee, {
            basedir: path.dirname(importer),
            packageFilter: function (pkg, _pkgPath) {
                if (pkg.module) {
                    pkg.main = pkg.module;
                }
                else if (pkg['jsnext:main']) {
                    pkg.main = pkg['jsnext:main'];
                }
                return pkg;
            },
            isFile: fs.isFile,
            readFile: fs.readFile,
            isDirectory: fs.isDirectory,
            preserveSymlinks: false
        }, function (err, resolved) {
            if (err) {
                reject(err);
            }
            else {
                if (forceFlat && !isFlat(resolved)) {
                    reject(forcedFlatMessage(importer, importee, resolved));
                }
                else {
                    fulfil(fs.isFileSync(resolved) ? fs.realpathSync(resolved) : resolved);
                }
            }
        });
    });
};
var normalizePrefix = function (prefix) {
    return prefix.endsWith('/') ? prefix : prefix + '/';
};
var matchesPrefix = function (prefixes, importee) {
    return Object.keys(prefixes).find(function (p) { return importee.startsWith(normalizePrefix(p)); }) !== undefined;
};
var resolvePrefix = function (prefixes, importee, _importer) {
    return new Promise(function (fulfil) {
        var prefix = Object.keys(prefixes).find(function (p) { return importee.startsWith(normalizePrefix(p)); });
        var resolvedPrefix = prefixes[prefix];
        var resolvedPath = path.join(resolvedPrefix, importee.substring(normalizePrefix(prefix).length)) + '.js';
        fulfil(resolvedPath);
    });
};
var resolvePrefixPaths = function (baseDir, prefixes) {
    var outPrefixes = {};
    Object.keys(prefixes).forEach(function (prefix) {
        var resolveBaseDir = baseDir ? baseDir : '.';
        outPrefixes[prefix] = path.resolve(path.join(resolveBaseDir, prefixes[prefix]));
    });
    return outPrefixes;
};
exports.resolvePrefixPaths = resolvePrefixPaths;
var runMappers = function (importer, mappers) { return function (resolvedImportee) {
    return Promise.resolve(mappers.reduce(function (p, f) { return f(p, importer); }, resolvedImportee));
}; };
var resolveId = function (fs, prefixes, mappers, forceFlat) { return function (importee, importer) {
    // ignore IDs with null character, these belong to other plugins
    if (/\0/.test(importee) || !importer || /\0/.test(importer)) {
        return null;
    }
    if (matchesPrefix(prefixes, importee)) {
        return resolvePrefix(prefixes, importee, importer);
    }
    else {
        return resolveUsingNode(fs, importee, importer, forceFlat).then(runMappers(importer, mappers));
    }
}; };
exports.resolveId = resolveId;
