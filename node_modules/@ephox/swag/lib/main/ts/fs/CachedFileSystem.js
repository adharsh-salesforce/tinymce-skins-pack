"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
exports.__esModule = true;
exports.getFileSystem = void 0;
var fs = __importStar(require("fs"));
var getFileSystem = function () {
    var statCache = {};
    var contentCache = {};
    var resolveCache = {};
    var isFile = function (file, cb) {
        var cacheItem = statCache[file];
        if (typeof cacheItem !== 'undefined') {
            return cb(null, cacheItem);
        }
        fs.stat(file, function (err, stat) {
            if (!err) {
                var exists = stat.isFile() || stat.isFIFO();
                statCache[file] = exists;
                return cb(null, exists);
            }
            if (err.code === 'ENOENT' || err.code === 'ENOTDIR') {
                statCache[file] = false;
                return cb(null, false);
            }
            return cb(err);
        });
    };
    var readFile = function (filePath, callback) {
        var cacheItem = contentCache[filePath];
        if (typeof cacheItem !== 'undefined') {
            return callback(null, cacheItem);
        }
        fs.readFile(filePath, function (err, data) {
            if (!err) {
                contentCache[filePath] = data;
            }
            callback(err, data);
        });
    };
    var isFileSync = function (filePath) {
        var cacheItem = statCache[filePath];
        if (typeof cacheItem !== 'undefined') {
            return cacheItem;
        }
        try {
            var stat = fs.statSync(filePath);
            var exists = stat.isFile() || stat.isFIFO();
            statCache[filePath] = exists;
            return exists;
        }
        catch (e) {
            if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) {
                return false;
            }
            throw e;
        }
    };
    var readFileSync = function (filePath) {
        var cacheItem = contentCache[filePath];
        if (typeof cacheItem !== 'undefined') {
            return cacheItem;
        }
        var data = fs.readFileSync(filePath);
        contentCache[filePath] = data;
        return data;
    };
    var realpathSync = function (filePath) {
        var cacheItem = resolveCache[filePath];
        if (typeof cacheItem !== 'undefined') {
            return cacheItem;
        }
        if (filePath && fs.existsSync(filePath)) {
            var resolved = fs.realpathSync(filePath);
            resolveCache[filePath] = resolved;
            return resolved;
        }
        return filePath;
    };
    var isDirectory = function (dirPath, cb) {
        var cacheItem = statCache[dirPath];
        if (typeof cacheItem !== 'undefined') {
            return cb(null, cacheItem);
        }
        fs.stat(dirPath, function (err, stat) {
            if (!err) {
                var exists = stat.isDirectory();
                statCache[dirPath] = exists;
                return cb(null, exists);
            }
            if (err.code === 'ENOENT' || err.code === 'ENOTDIR') {
                statCache[dirPath] = false;
                return cb(null, false);
            }
            return cb(err);
        });
    };
    var isDirectorySync = function (dirPath) {
        var cacheItem = statCache[dirPath];
        if (typeof cacheItem !== 'undefined') {
            return cacheItem;
        }
        try {
            var stat = fs.statSync(dirPath);
            var exists = stat.isDirectory();
            statCache[dirPath] = exists;
            return exists;
        }
        catch (e) {
            if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) {
                return false;
            }
            throw e;
        }
    };
    return {
        isFile: isFile,
        readFile: readFile,
        isFileSync: isFileSync,
        readFileSync: readFileSync,
        realpathSync: realpathSync,
        isDirectory: isDirectory,
        isDirectorySync: isDirectorySync
    };
};
exports.getFileSystem = getFileSystem;
