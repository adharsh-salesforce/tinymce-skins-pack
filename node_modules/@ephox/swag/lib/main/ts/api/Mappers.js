"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
exports.__esModule = true;
exports.invalidDir = exports.replaceDir = void 0;
var path = __importStar(require("path"));
var isChildOf = function (childPath, parentPath) {
    return childPath.startsWith(parentPath + '/');
};
var replacePrefix = function (importeePath, oldDirPath, newDirPath) {
    return newDirPath + importeePath.substring(oldDirPath.length);
};
var replaceDir = function (oldDir, newDir) {
    var oldDirPath = path.resolve(oldDir);
    var newDirPath = path.resolve(newDir);
    return function (importee, _importer) {
        return isChildOf(importee, oldDirPath) ? replacePrefix(importee, oldDirPath, newDirPath) : importee;
    };
};
exports.replaceDir = replaceDir;
var invalidDir = function (dir) {
    var invalidDirPath = path.resolve(dir);
    return function (importee, importer) {
        if (isChildOf(importee, invalidDirPath)) {
            throw new Error("Invalid import resolved to: ".concat(importee, " found in ").concat(importer, " blocked by ").concat(invalidDirPath));
        }
        else {
            return importee;
        }
    };
};
exports.invalidDir = invalidDir;
