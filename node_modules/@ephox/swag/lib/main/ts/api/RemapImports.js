"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.remapImports = void 0;
var path_1 = require("path");
var Parser_1 = require("../ast/js/Parser");
var Remap_1 = require("../ast/js/Remap");
var Serializer_1 = require("../ast/js/Serializer");
var RemapCache_1 = require("../ast/RemapCache");
var CachedFileSystem_1 = require("../fs/CachedFileSystem");
var defaultOptions = {
    forceFlat: true
};
var transformJs = function (fs, remapCache, forceFlat, code, id) {
    var program = (0, Parser_1.parse)(code);
    (0, Remap_1.remap)(fs, remapCache, id, program, forceFlat);
    var newCode = (0, Serializer_1.serialize)(program);
    return {
        code: newCode,
        map: { version: 3, sources: [], mappings: '' }
    };
};
var transform = function (fs, remapCache, forceFlat) { return function (code, id) {
    return (0, path_1.extname)(id) === '.js' ? transformJs(fs, remapCache, forceFlat, code, id) : code;
}; };
var remapImports = function (options) {
    if (options === void 0) { options = defaultOptions; }
    var combinedOptions = __assign(__assign({}, defaultOptions), options);
    var fs = combinedOptions.fileSystem ? combinedOptions.fileSystem : (0, CachedFileSystem_1.getFileSystem)();
    var remapCache = (0, RemapCache_1.createRemapCache)();
    return {
        name: 'swag-remap-imports',
        transform: transform(fs, remapCache, combinedOptions.forceFlat)
    };
};
exports.remapImports = remapImports;
