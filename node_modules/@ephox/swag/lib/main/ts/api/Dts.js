"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.dts = void 0;
var rollup_plugin_dts_1 = __importDefault(require("rollup-plugin-dts"));
var ts = __importStar(require("typescript"));
var DtsCleaner_1 = require("../ast/ts/DtsCleaner");
var Parser_1 = require("../ast/ts/Parser");
var Fail_1 = require("../utils/Fail");
var formatHost = {
    getCurrentDirectory: function () { return ts.sys.getCurrentDirectory(); },
    getNewLine: function () { return ts.sys.newLine; },
    getCanonicalFileName: ts.sys.useCaseSensitiveFileNames ? function (f) { return f; } : function (f) { return f.toLowerCase(); }
};
var validate = function (filename, code) {
    // Parse and get the diagnostics
    var program = (0, Parser_1.parse)(code, filename);
    var diagnostics = program.getDeclarationDiagnostics()
        .concat(program.getSyntacticDiagnostics())
        .concat(program.getSemanticDiagnostics());
    // Check if anything failed and if so log an error
    if (diagnostics.length > 0) {
        // eslint-disable-next-line no-console
        console.error(ts.formatDiagnostics(diagnostics, formatHost));
        (0, Fail_1.fail)('Failed to compile');
    }
};
var cleanCode = function (filename, code, options) {
    var source = ts.createSourceFile(filename, code, ts.ScriptTarget.Latest, true);
    return (0, DtsCleaner_1.clean)(source, options);
};
var getPluginHook = function (hook) {
    return typeof hook === 'function' ? hook : hook.handler;
};
var dts = function (options) {
    if (options === void 0) { options = {}; }
    var dtsPlugin = (0, rollup_plugin_dts_1["default"])(options);
    return __assign(__assign({ name: 'swag-dts' }, dtsPlugin), { outputOptions: function (outputOptions) {
            // Need to override the entry filename, as the plugin converts it to "name.d.d.ts"
            return getPluginHook(dtsPlugin.outputOptions).call(dtsPlugin, __assign(__assign({}, outputOptions), { entryFileNames: outputOptions.entryFileNames || '[name].ts' }));
        }, renderChunk: function (code, chunk) {
            var output = getPluginHook(dtsPlugin.renderChunk).call(dtsPlugin, code, chunk);
            // Strip out source mapping comments
            var transformedCode = output.code.replace(/\/\/# sourceMappingURL=\w+\.d\.ts\.map/g, '');
            if (process.env.SWAG_DTS_DEBUG) {
                // eslint-disable-next-line no-console
                console.debug('Transformed:\n' + transformedCode);
            }
            // Parse the source and clean
            var cleanedCode = options.clean === false ? transformedCode : cleanCode(chunk.fileName, transformedCode, options);
            if (process.env.SWAG_DTS_DEBUG) {
                // eslint-disable-next-line no-console
                console.debug('Cleaned:\n' + transformedCode);
            }
            // Validate if required
            if (options.validate !== false) {
                validate(chunk.fileName, cleanedCode);
            }
            return __assign(__assign({}, output), { code: cleanedCode });
        } });
};
exports.dts = dts;
