"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
exports.__esModule = true;
exports.task = void 0;
var path = __importStar(require("path"));
var rollup_1 = require("rollup");
var isFunction = function (val) { return typeof val === 'function'; };
var isOutputChunk = function (output) { return output.hasOwnProperty('map'); };
var defaultInputOptions = {
    cache: null,
    external: [],
    onwarn: null,
    plugins: null,
    treeshake: true
};
var defaultOutputOptions = {
    name: null,
    format: 'es',
    exports: 'auto',
    amd: {
        id: null
    },
    globals: {},
    indent: true,
    strict: true,
    banner: null,
    footer: null,
    intro: null,
    outro: null,
    paths: null,
    preferConst: false,
    sourcemap: false,
    sourcemapFile: null,
    interop: true
};
var defaultOptions = __assign(__assign({}, defaultInputOptions), defaultOutputOptions);
// This is a workaround to get dom-globals to work and not have to bundle the entire module
// TODO find a better way to map dom-globals to their relevant global properties
var patchOptions = function (options) {
    var newOptions = __assign({ external: [], globals: {} }, options);
    // Make dom-globals an external dep and then map it to the window object
    if (newOptions.external.indexOf('@ephox/dom-globals') === -1) {
        newOptions.external.push('@ephox/dom-globals');
    }
    newOptions.globals['@ephox/dom-globals'] = 'window';
    return newOptions;
};
var task = function (grunt) {
    grunt.registerMultiTask('rollup', 'rollup your grunt!', function () {
        var done = this.async();
        var options = patchOptions(this.options(defaultOptions));
        var file = this.files[0];
        var input = file.src[0];
        var plugins = isFunction(options.plugins) ? options.plugins() : options.plugins;
        if (this.files.length > 1) {
            grunt.fail.warn('This task only accepts a single file input.');
        }
        else if (!file.src || file.src.length === 0) {
            grunt.fail.warn('No entry point specified.');
        }
        else if (!grunt.file.exists(input)) {
            grunt.fail.warn('Entry point "' + input + '" not found.');
        }
        (0, rollup_1.rollup)({
            cache: options.cache,
            input: input,
            external: options.external,
            plugins: plugins,
            context: options.context,
            onwarn: options.onwarn,
            output: {
                preferConst: options.preferConst
            },
            treeshake: options.treeshake
        }).then(function (bundle) { return bundle.generate({
            format: options.format,
            exports: options.exports,
            paths: options.paths,
            name: options.name,
            globals: options.globals,
            indent: options.indent,
            strict: options.strict,
            banner: options.banner,
            footer: options.footer,
            intro: options.intro,
            outro: options.outro,
            sourcemap: options.sourcemap,
            sourcemapFile: options.sourcemapFile
        }); }).then(function (result) {
            var outputs = result.output;
            for (var _i = 0, outputs_1 = outputs; _i < outputs_1.length; _i++) {
                var output = outputs_1[_i];
                if (isOutputChunk(output)) {
                    if (options.sourcemap === true) {
                        var sourceMapOutPath = file.dest + '.map';
                        grunt.file.write(sourceMapOutPath, output.map.toString());
                        grunt.file.write(file.dest, "".concat(output.code, "\n//# sourceMappingURL=").concat(path.basename(sourceMapOutPath)));
                    }
                    else if (options.sourcemap === 'inline') {
                        grunt.file.write(file.dest, "".concat(output.code, "\n//# sourceMappingURL=").concat(output.map.toUrl()));
                    }
                    else {
                        grunt.file.write(file.dest, output.code);
                    }
                }
                else {
                    grunt.file.write(file.dest, output.source.toString());
                }
            }
            done();
        })["catch"](function (error) { return grunt.fail.warn(error); });
    });
};
exports.task = task;
