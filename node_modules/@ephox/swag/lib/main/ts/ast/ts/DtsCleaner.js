"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
exports.__esModule = true;
exports.clean = void 0;
var ts = __importStar(require("typescript"));
var Serializer_1 = require("./Serializer");
var isNamed = function (node, names) {
    return node.name.kind === ts.SyntaxKind.Identifier ? names.indexOf(node.name.text) !== -1 : false;
};
var isVariableNamed = function (statement, names) {
    return statement.declarationList.declarations.some(function (decl) { return isNamed(decl, names); });
};
var isExported = function (node) {
    return node.modifiers && node.modifiers.some(function (mod) { return mod.kind === ts.SyntaxKind.ExportKeyword; });
};
// Strip out all comments, namespace, function and const declarations
var clean = function (ast, options) {
    if (options === void 0) { options = {}; }
    var keepVariables = options.keepVariables || [];
    var removeNamespaces = options.removeNamespaces || [];
    var nodes = [];
    ts.forEachChild(ast, function (node) {
        switch (node.kind) {
            case ts.SyntaxKind.FunctionDeclaration:
            case ts.SyntaxKind.MethodDeclaration:
            case ts.SyntaxKind.PropertyDeclaration:
                var decl = node;
                if (isExported(decl) || isNamed(decl, keepVariables)) {
                    nodes.push(node);
                }
                break;
            case ts.SyntaxKind.ModuleDeclaration:
                var module_1 = node;
                if (!isNamed(module_1, removeNamespaces)) {
                    nodes.push(node);
                }
                break;
            case ts.SyntaxKind.VariableStatement:
                var statement = node;
                if (isVariableNamed(statement, keepVariables)) {
                    nodes.push(node);
                }
                break;
            default:
                nodes.push(node);
        }
    });
    return (0, Serializer_1.serialize)(ast, nodes, { removeComments: !options.keepComments });
};
exports.clean = clean;
