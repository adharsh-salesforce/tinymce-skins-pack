"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
exports.__esModule = true;
exports.parse = void 0;
/* eslint-disable @typescript-eslint/unbound-method */
var ts = __importStar(require("typescript"));
var parseConfigHost = {
    useCaseSensitiveFileNames: ts.sys.useCaseSensitiveFileNames,
    readDirectory: ts.sys.readDirectory,
    fileExists: ts.sys.fileExists,
    readFile: ts.sys.readFile
};
var parse = function (code, filename) {
    if (filename === void 0) { filename = 'code.ts'; }
    var configFileName = ts.findConfigFile('.', ts.sys.fileExists);
    var configResult = ts.readConfigFile(configFileName, ts.sys.readFile);
    var jsonResult = ts.parseJsonConfigFileContent(configResult.config, parseConfigHost, '.');
    var compilerOptions = jsonResult.options;
    // Create a virtual host to resolve the file
    var host = ts.createCompilerHost(compilerOptions);
    var origGetSourceFile = host.getSourceFile;
    host.getSourceFile = function (name, languageVersion, onError, shouldCreateNewSourceFile) {
        if (name === filename) {
            return ts.createSourceFile(filename, code, compilerOptions.target, true);
        }
        else {
            return origGetSourceFile(name, languageVersion, onError, shouldCreateNewSourceFile);
        }
    };
    // Create the program
    return ts.createProgram([filename], compilerOptions, host);
};
exports.parse = parse;
