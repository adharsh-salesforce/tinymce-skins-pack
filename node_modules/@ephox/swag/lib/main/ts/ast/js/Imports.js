"use strict";
exports.__esModule = true;
exports.toSource = exports.toAst = exports.createImport = exports.readImports = exports.ImportInfoKind = void 0;
var Fail_1 = require("../../utils/Fail");
var Serializer_1 = require("./Serializer");
var ImportInfoKind;
(function (ImportInfoKind) {
    ImportInfoKind[ImportInfoKind["Default"] = 0] = "Default";
    ImportInfoKind[ImportInfoKind["Namespace"] = 1] = "Namespace";
    ImportInfoKind[ImportInfoKind["Specified"] = 2] = "Specified";
    ImportInfoKind[ImportInfoKind["SideEffect"] = 3] = "SideEffect";
})(ImportInfoKind = exports.ImportInfoKind || (exports.ImportInfoKind = {}));
var createImport = function (kind, name, fromName, modulePath) {
    return { kind: kind, name: name, fromName: fromName, modulePath: modulePath };
};
exports.createImport = createImport;
var readDefaultSpecifier = function (modulePath, specifier) {
    return createImport(ImportInfoKind.Default, specifier.local.name, specifier.local.name, modulePath);
};
var readNamespaceSpecifier = function (modulePath, specifier) {
    return createImport(ImportInfoKind.Namespace, specifier.local.name, specifier.local.name, modulePath);
};
var readImportSpecifier = function (modulePath, specifier) {
    return createImport(ImportInfoKind.Specified, specifier.local.name, specifier.imported.name, modulePath);
};
var readImportSpecifiers = function (node) {
    return node.specifiers.map(function (specifier) {
        if (specifier.type === 'ImportDefaultSpecifier') {
            var name = node.source.value;
            return readDefaultSpecifier(name, specifier);
        }
        else if (specifier.type === 'ImportNamespaceSpecifier') {
            var name = node.source.value;
            return readNamespaceSpecifier(name, specifier);
        }
        else if (specifier.type === 'ImportSpecifier') {
            var name = node.source.value;
            return readImportSpecifier(name, specifier);
        }
        else {
            (0, Fail_1.fail)('Unknown specifier.');
            return null;
        }
    });
};
var readSideEffectImport = function (node) {
    if (node.source && node.source.type === 'Literal') {
        var name = node.source.value;
        return createImport(ImportInfoKind.SideEffect, null, null, name);
    }
    else {
        (0, Fail_1.fail)('Unknown import type.');
        return null;
    }
};
var readImportDeclaration = function (node) {
    return node.specifiers.length > 0 ? readImportSpecifiers(node) : readSideEffectImport(node);
};
var readImports = function (program) {
    return program.body.reduce(function (acc, node) {
        if (node.type === 'ImportDeclaration') {
            var imports = readImportDeclaration(node);
            return acc.concat(imports);
        }
        return acc;
    }, []);
};
exports.readImports = readImports;
var toAst = function (imports) {
    return imports.map(function (imp) {
        if (imp.kind === ImportInfoKind.Default) {
            return {
                type: 'ImportDeclaration',
                specifiers: [
                    {
                        type: 'ImportDefaultSpecifier',
                        local: {
                            type: 'Identifier',
                            name: imp.name
                        }
                    }
                ],
                source: {
                    type: 'Literal',
                    value: imp.modulePath,
                    raw: "'".concat(imp.modulePath, "'")
                }
            };
        }
        else if (imp.kind === ImportInfoKind.Namespace) {
            return {
                type: 'ImportDeclaration',
                specifiers: [
                    {
                        type: 'ImportNamespaceSpecifier',
                        local: {
                            type: 'Identifier',
                            name: imp.name
                        }
                    }
                ],
                source: {
                    type: 'Literal',
                    value: imp.modulePath,
                    raw: "'".concat(imp.modulePath, "'")
                }
            };
        }
        else if (imp.kind === ImportInfoKind.Specified) {
            return {
                type: 'ImportDeclaration',
                specifiers: [
                    {
                        type: 'ImportSpecifier',
                        imported: {
                            type: 'Identifier',
                            name: imp.fromName
                        },
                        local: {
                            type: 'Identifier',
                            name: imp.name
                        }
                    }
                ],
                source: {
                    type: 'Literal',
                    value: imp.modulePath,
                    raw: "'".concat(imp.modulePath, "'")
                }
            };
        }
        else if (imp.kind === ImportInfoKind.SideEffect) {
            return {
                type: 'ImportDeclaration',
                specifiers: [],
                source: {
                    type: 'Literal',
                    value: imp.modulePath,
                    raw: "'".concat(imp.modulePath, "'")
                }
            };
        }
        else {
            return null;
        }
    });
};
exports.toAst = toAst;
var toSource = function (imports) {
    return (0, Serializer_1.serialize)({
        type: 'Program',
        body: toAst(imports),
        sourceType: 'module'
    });
};
exports.toSource = toSource;
