"use strict";
exports.__esModule = true;
exports.importsToText = exports.parseImports = exports.parseComments = void 0;
var tokenize = function (regex, code) {
    var tokens = [];
    var matches;
    while ((matches = regex.exec(code))) {
        tokens.push({ start: matches.index, end: matches.index + matches[0].length, text: matches[0] });
    }
    return tokens;
};
var parseComments = function (code) {
    var regex = /\/\*[^]*?\*\/|[\t ]*\/\/[^\n]+/g;
    return tokenize(regex, code);
};
exports.parseComments = parseComments;
var parseImportStringLiterals = function (code) {
    var regex = /\'[^'\r\n;]*import[^'\r\n]*\'|\"[^"\r\n;]*import[^"\r\n]*\"/g;
    return tokenize(regex, code);
};
var parseImports = function (code) {
    var regex = /import(?:\s+([\w*{}\n\r\t, ]+)from)?\s+["']\s*([@\w./_-]+)\s*["'](?:\s*;)?/g;
    var comments = (0, exports.parseComments)(code);
    var importStringLiterals = parseImportStringLiterals(code);
    var notContainsIn = function (tokens) { return function (imp) { return tokens.findIndex(function (token) { return imp.start > token.start && imp.start < token.end; }) === -1; }; };
    return tokenize(regex, code).filter(notContainsIn(comments)).filter(notContainsIn(importStringLiterals));
};
exports.parseImports = parseImports;
var importsToText = function (tokens) {
    return tokens.map(function (token) { return token.text; }).join('\n');
};
exports.importsToText = importsToText;
