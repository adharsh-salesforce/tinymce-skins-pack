"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-misused-promises */
const mocha_1 = require("mocha");
const chai_1 = require("chai");
const Vinyl = require("vinyl");
const xmldom_1 = require("@xmldom/xmldom");
const ESImport_1 = require("./alien/ESImport");
const Main_1 = require("../../main/ts/api/Main");
const runPlugin = (options, svgs) => new Promise((resolve) => {
    const mockFs = {};
    const stream = (0, Main_1.iconPackager)(options);
    stream.on('data', (file) => mockFs[file.path] = file);
    svgs.forEach((svg) => {
        stream.write(new Vinyl({
            path: svg.name + '.svg',
            contents: Buffer.from(svg.data)
        }));
    });
    stream.once('end', () => resolve(mockFs));
    stream.end();
});
(0, mocha_1.describe)('PluginTest', () => {
    const svgs = [
        { name: 'highlight-bg-color', data: '<svg id="tox-icon-highlight-bg-color__color" width="24" height="24"></svg>' },
        { name: 'text-color', data: '<svg id="tox-icon-text-color__color" width="24" height="24"></svg>' },
        { name: 'align-left', data: '<svg width="24" height="24"><g id="a-invalid-id"></g></svg>' },
        { name: 'align-right', data: '<svg width="24" height="24"></svg>' }
    ];
    const validateIcons = (icons) => {
        const hasId = (rawSvg, id) => {
            const dom = new xmldom_1.DOMParser().parseFromString(rawSvg, 'image/svg+xml');
            return !!dom.getElementById(id);
        };
        chai_1.assert.hasAllKeys(icons, svgs.map((svg) => svg.name), 'Should have all icons');
        chai_1.assert.isTrue(hasId(icons['highlight-bg-color'], 'tox-icon-highlight-bg-color__color'), 'Should preserve "tox-icon-highlight-bg-color__color" id');
        chai_1.assert.isTrue(hasId(icons['text-color'], 'tox-icon-text-color__color'), 'Should preserve "tox-icon-text-color__color" id');
        chai_1.assert.isFalse(hasId(icons['align-left'], 'a-invalid-id'), 'Should not preserve "a-invalid-id" id');
    };
    it('Should output files on correct paths', () => runPlugin({ name: 'my-icon-pack' }, svgs).then((mockFs) => {
        chai_1.assert.hasAllKeys(mockFs, [
            'icons/my-icon-pack/icons.js',
            'html/icons.html',
            'js/icons.d.ts',
            'js/icons.js'
        ], 'Should output all files on correct paths');
    }));
    it('"js/icons.js" should be a ES6 module with named export "getAll"', () => runPlugin({ name: 'my-icon-pack' }, svgs).then((mockFs) => {
        const file = mockFs['js/icons.js'];
        const exprt = (0, ESImport_1.importFromString)(file.contents.toString(), file.basename);
        chai_1.assert.isFunction(exprt.getAll, 'Should have named export "getAll"');
        validateIcons(exprt.getAll());
    }));
    it('"icons/my-icon-pack/icons.js" should add an icon pack to tinymce global', () => runPlugin({ name: 'my-icon-pack' }, svgs).then((mockFs) => {
        const file = mockFs['icons/my-icon-pack/icons.js'];
        Object.defineProperty(global, 'tinymce', {
            value: {
                IconManager: {
                    add: (name, iconPack) => {
                        chai_1.assert.strictEqual(name, 'my-icon-pack', 'Should be correct icon pack name');
                        validateIcons(iconPack.icons);
                    }
                }
            }
        });
        (0, ESImport_1.importFromString)(file.contents.toString(), file.basename);
    }));
});
//# sourceMappingURL=PluginTest.js.map