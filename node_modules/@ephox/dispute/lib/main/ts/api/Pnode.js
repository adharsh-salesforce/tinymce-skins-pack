import { __assign } from "tslib";
import * as ArrayUtil from '../core/ArrayUtil';
import * as StringUtil from '../core/StringUtil';
export var pnode = function (start, children, end) { return ({
    start: start, children: children, end: end
}); };
export var single = function (s) { return pnode(s, [], ''); };
export var setStart = function (start) { return function (p) { return (__assign(__assign({}, p), { start: start })); }; };
export var setChildren = function (children) { return function (p) { return (__assign(__assign({}, p), { children: children })); }; };
export var setEnd = function (end) { return function (p) { return (__assign(__assign({}, p), { end: end })); }; };
export var modStart = function (f) { return function (p) { return setStart(f(p.start))(p); }; };
export var modChildren = function (f) { return function (p) { return setChildren(f(p.children))(p); }; };
export var modEnd = function (f) { return function (p) { return setEnd(f(p.end))(p); }; };
export var prependStart = function (s) { return modStart(function (start) { return s + start; }); };
export var appendEnd = function (s) { return modEnd(function (end) { return end + s; }); };
var doRender = function (level, n) {
    var ind = StringUtil.repeat(level, '  ');
    if (n.children.length === 0) {
        return ind + n.start + n.end;
    }
    else {
        var rkids = ArrayUtil.map(n.children, function (p) { return doRender(level + 1, p); });
        return ind + n.start + '\n' + rkids.join('\n') + '\n' + ind + n.end;
    }
};
export var render = function (n) { return doRender(0, n); };
//# sourceMappingURL=Pnode.js.map