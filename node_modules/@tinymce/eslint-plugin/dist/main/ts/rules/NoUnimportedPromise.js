"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.noUnimportedPromise = void 0;
const Arr_1 = require("../utils/Arr");
const NewOrCallUtils = __importStar(require("../utils/NewOrCallUtils"));
const ScopeUtils_1 = require("../utils/ScopeUtils");
const isPromiseImportSpecifier = (specifier) => specifier.local.name === 'Promise';
const hasPromiseInScope = (context) => (0, ScopeUtils_1.hasVariableInScope)(context, 'Promise');
exports.noUnimportedPromise = {
    meta: {
        type: 'problem',
        docs: {
            description: 'Disallows usage of Promise without importing a featurefill.'
        },
        messages: {
            promiseFillMissing: 'Promise needs a featurefill import since IE 11 doesn\'t have native support.'
        }
    },
    create: (context) => {
        let seenPromiseImport = false;
        return Object.assign({ ImportDeclaration: (node) => {
                if (node.type === 'ImportDeclaration') {
                    if ((0, Arr_1.exists)(node.specifiers, isPromiseImportSpecifier)) {
                        seenPromiseImport = true;
                    }
                }
            } }, NewOrCallUtils.forIdentifier((node, identifier) => {
            if (identifier.name === 'Promise') {
                if (!seenPromiseImport && !hasPromiseInScope(context)) {
                    const callee = node.type === 'NewExpression' ? identifier : node;
                    context.report({
                        node: callee,
                        messageId: 'promiseFillMissing'
                    });
                }
            }
        }));
    }
};
//# sourceMappingURL=NoUnimportedPromise.js.map