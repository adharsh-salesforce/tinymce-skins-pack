"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.preferFun = void 0;
const path = __importStar(require("path"));
const ExtractUtils_1 = require("../utils/ExtractUtils");
const ScopeUtils_1 = require("../utils/ScopeUtils");
const isKatamariFunModule = (filePath) => {
    const pathWithoutExt = filePath.replace(/\.[tj]s$/, '');
    return pathWithoutExt.endsWith(path.join('katamari', 'api', 'Fun'));
};
const isKatamariFunConstant = (context, node) => {
    const property = node.property;
    const object = node.object;
    const isFunModule = object.type === 'Identifier' && object.name === 'Fun';
    const isConstantFunction = property.type === 'Identifier' && property.name === 'constant';
    if (isFunModule && isConstantFunction) {
        // Ensure the Fun identifier is referring to the import from katamari
        const funVar = (0, ScopeUtils_1.findVariableFromScope)(context, 'Fun');
        if (funVar !== undefined && funVar.defs.length > 0) {
            const def = funVar.defs[0];
            const parent = def.parent;
            if (def.type === 'ImportBinding' && (parent === null || parent === void 0 ? void 0 : parent.type) === 'ImportDeclaration') {
                return (0, ExtractUtils_1.extractModuleSpecifier)(parent).includes('katamari');
            }
        }
    }
    return false;
};
const isRegExpLiteral = (literal) => Object.prototype.hasOwnProperty.call(literal, 'regex');
const isBooleanLiteral = (expr) => {
    if (expr.type === 'Literal') {
        return expr.raw === 'false' || expr.raw === 'true';
    }
    else {
        return false;
    }
};
const isConstant = (context, func, obj) => {
    if (func.params.length !== 0 || hasTypeParameters(func)) {
        // If the function has type generics or arguments then treat it as not being constant
        return false;
    }
    else if (obj.type === 'Literal') {
        // Regexes can maintain state, so they aren't considered a constant
        return !isRegExpLiteral(obj);
    }
    else if (obj.type === 'TemplateLiteral') {
        // If a template does variable replacement, then it's not a constant
        return obj.expressions.length === 0;
    }
    else if (obj.type === 'Identifier') {
        const variable = (0, ScopeUtils_1.findVariableFromScope)(context, obj.name);
        return variable !== undefined && (0, ScopeUtils_1.isConstantVariable)(variable) && !(0, ScopeUtils_1.isVarUsedBeforeDeclaration)(obj, variable);
    }
    else {
        return false;
    }
};
const isIdentity = (func, expr) => {
    if (func.params.length === 1 && !hasTypeParameters(func)) {
        const param = func.params[0];
        return param.type === 'Identifier' && expr.type === 'Identifier' && param.name === expr.name;
    }
    else {
        return false;
    }
};
const hasTypeParameters = (func) => {
    const tsFunc = func;
    const params = tsFunc.typeParameters;
    if (params !== undefined && params.type === 'TSTypeParameterDeclaration') {
        return params.params.length > 0;
    }
    else {
        return false;
    }
};
const extractFunctionBodyExpression = (func, body) => {
    if (body === null) {
        return body;
    }
    else if (body.type === 'BlockStatement') {
        const funcBody = body.body;
        if (funcBody.length === 1) {
            return extractFunctionBodyExpression(func, funcBody[0]);
        }
        else if (funcBody.length === 0) {
            return null;
        }
        else {
            return body;
        }
    }
    else if (body.type === 'ReturnStatement' && body.argument !== undefined) {
        return extractFunctionBodyExpression(func, body.argument);
    }
    else {
        return body;
    }
};
exports.preferFun = {
    meta: {
        type: 'suggestion',
        docs: {
            description: 'Prefer using the Katamari Fun helper functions, instead of inline functions.'
        },
        messages: {
            preferNoop: 'Use `Fun.noop` instead of redeclaring a no-op function, eg: `() => {}`',
            preferAlways: 'Use `Fun.always` instead of redeclaring a function that always returns true, eg: `() => true`',
            preferNever: 'Use `Fun.never` instead of redeclaring a function that always returns false, eg: `() => false`',
            preferConstant: 'Use `Fun.constant` instead of redeclaring a function that always returns the same value, eg: `() => 0`',
            preferIdentity: 'Use `Fun.identity` instead of redeclaring a function that always returns the arguments, eg: `(x) => x`'
        },
        schema: [
            {
                type: 'object',
                properties: {
                    noop: { type: 'boolean' },
                    always: { type: 'boolean' },
                    never: { type: 'boolean' },
                    constant: { type: 'boolean' },
                    identity: { type: 'boolean' }
                },
                additionalProperties: false
            }
        ]
    },
    create: (context) => {
        const options = context.options[0] || {};
        const report = (func, type) => {
            if (options[type.toLowerCase()] !== false) {
                context.report({
                    node: func,
                    messageId: `prefer${type}`
                });
            }
        };
        const reportIfRequired = (func, expr) => {
            const numArgs = func.params.length;
            if (numArgs === 0) {
                if (expr === null) {
                    report(func, "Noop" /* Option.Noop */);
                }
                else if (isBooleanLiteral(expr)) {
                    report(func, expr.raw === 'true' ? "Always" /* Option.Always */ : "Never" /* Option.Never */);
                    // We're dealing with an identifier, primitive value, regex or similar here
                }
                else if (isConstant(context, func, expr)) {
                    report(func, "Constant" /* Option.Constant */);
                }
            }
            else if (numArgs === 1) {
                if (expr !== null && isIdentity(func, expr)) {
                    report(func, "Identity" /* Option.Identity */);
                }
            }
        };
        const validateFunctionBody = (func, body) => {
            const returnExpr = extractFunctionBodyExpression(func, body);
            if (returnExpr === null || returnExpr.type === 'Literal' || returnExpr.type === 'Identifier' || returnExpr.type === 'TemplateLiteral') {
                reportIfRequired(func, returnExpr);
            }
        };
        // Ignore cases in the actual Katamari Fun module
        if (isKatamariFunModule(context.getFilename())) {
            return {};
        }
        else {
            return {
                FunctionExpression: (node) => {
                    if (node.type === 'FunctionExpression' && node.params.length <= 1) {
                        validateFunctionBody(node, node.body);
                    }
                },
                ArrowFunctionExpression: (node) => {
                    if (node.type === 'ArrowFunctionExpression' && node.params.length <= 1) {
                        validateFunctionBody(node, node.body);
                    }
                },
                CallExpression: (node) => {
                    if (node.type === 'CallExpression') {
                        const callee = node.callee;
                        if (callee.type === 'MemberExpression' && node.arguments.length === 1 && isKatamariFunConstant(context, callee)) {
                            const arg = node.arguments[0];
                            // We only care about Fun.constant(false) or Fun.constant(true) here
                            if (isBooleanLiteral(arg)) {
                                report(node, arg.raw === 'true' ? "Always" /* Option.Always */ : "Never" /* Option.Never */);
                            }
                        }
                    }
                }
            };
        }
    }
};
//# sourceMappingURL=PreferFun.js.map