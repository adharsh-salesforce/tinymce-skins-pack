"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.noImplicitDomGlobals = void 0;
const ExtractUtils_1 = require("../utils/ExtractUtils");
const Globals = __importStar(require("../utils/Globals"));
const NewOrCallUtils = __importStar(require("../utils/NewOrCallUtils"));
const ScopeUtils_1 = require("../utils/ScopeUtils");
const defaultExceptions = [
    'window',
    'document',
    'console',
    'navigator',
    'localStorage',
    'sessionStorage',
    // Common functions
    'atob',
    'clearTimeout',
    'setTimeout',
    'clearInterval',
    'setInterval',
    // Commons constructors
    'Blob',
    'DOMParser',
    'FileReader',
    'FormData',
    'MutationObserver',
    'Image',
    'URL',
    'XMLHttpRequest',
    // Common property accessors
    'Node',
    'NodeFilter',
    // Common events
    'Event',
    'KeyboardEvent',
    'MouseEvent',
    'Touch',
    'TouchEvent',
    'UIEvent'
];
const getAllowedGlobals = (options) => {
    const allowedGlobals = options.allowed || [];
    if (options.appendDefaults) {
        return allowedGlobals.concat(defaultExceptions);
    }
    else {
        return options.allowed === undefined ? defaultExceptions : allowedGlobals;
    }
};
const extractInitIdentifier = (node) => {
    const init = node.init;
    return init ? (0, ExtractUtils_1.extractIdentifier)(init) : null;
};
exports.noImplicitDomGlobals = {
    meta: {
        type: 'problem',
        docs: {
            description: 'Disallows implicit dom global variables from being used without being accessed via the global window object. ' +
                'A number of common ones are allowed by default however, such as window and document.'
        },
        messages: {
            noImplicitDomGlobals: 'Don\'t use implicit dom globals. Access the global via the window object instead.'
        },
        fixable: 'code',
        schema: [
            {
                type: 'object',
                properties: {
                    allowed: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    },
                    appendDefaults: {
                        type: 'boolean'
                    }
                },
                additionalProperties: false
            }
        ]
    },
    create: (context) => {
        const options = context.options[0] || {};
        const allowed = getAllowedGlobals(options);
        // PERFORMANCE: Convert the invalid list to a Set for better lookup times
        const invalid = new Set(Globals.getDomGlobals().filter((name) => !allowed.includes(name)));
        const report = (node) => {
            context.report({
                node,
                messageId: 'noImplicitDomGlobals',
                fix: (fixer) => fixer.insertTextBefore(node, 'window.')
            });
        };
        const validateIdentifier = (identifier) => {
            if (identifier !== null) {
                const name = identifier.name;
                if (invalid.has(name) && !(0, ScopeUtils_1.hasVariableInScope)(context, name)) {
                    report(identifier);
                }
            }
        };
        return Object.assign({ 'VariableDeclarator': (node) => {
                if (node.type === 'VariableDeclarator' && node.init) {
                    const identifier = extractInitIdentifier(node);
                    validateIdentifier(identifier);
                }
            }, 'ExpressionStatement': (node) => {
                if (node.type === 'ExpressionStatement') {
                    const identifier = (0, ExtractUtils_1.extractIdentifier)(node.expression);
                    validateIdentifier(identifier);
                }
            }, 'AssignmentExpression,BinaryExpression': (node) => {
                if (node.type === 'AssignmentExpression' || node.type === 'BinaryExpression') {
                    const leftIdentifier = (0, ExtractUtils_1.extractIdentifier)(node.left);
                    validateIdentifier(leftIdentifier);
                    const rightIdentifier = (0, ExtractUtils_1.extractIdentifier)(node.right);
                    validateIdentifier(rightIdentifier);
                }
            }, 'ConditionalExpression': (node) => {
                if (node.type === 'ConditionalExpression') {
                    const testIdentifier = (0, ExtractUtils_1.extractIdentifier)(node.test);
                    validateIdentifier(testIdentifier);
                    const conIdentifier = (0, ExtractUtils_1.extractIdentifier)(node.consequent);
                    validateIdentifier(conIdentifier);
                    const altIdentifier = (0, ExtractUtils_1.extractIdentifier)(node.alternate);
                    validateIdentifier(altIdentifier);
                }
            }, 'ArrayExpression': (node) => {
                node.elements.forEach((element) => {
                    const identifier = (0, ExtractUtils_1.extractIdentifier)(element);
                    validateIdentifier(identifier);
                });
            }, 'ObjectExpression > Property': (node) => {
                if (node.type === 'Property') {
                    const identifier = (0, ExtractUtils_1.extractIdentifier)(node.value);
                    validateIdentifier(identifier);
                }
            }, 'ReturnStatement': (node) => {
                if (node.type === 'ReturnStatement' && node.argument) {
                    const identifier = (0, ExtractUtils_1.extractIdentifier)(node.argument);
                    validateIdentifier(identifier);
                }
            } }, NewOrCallUtils.forIdentifier((node, identifier) => {
            const name = identifier.name;
            if (invalid.has(name) && !(0, ScopeUtils_1.hasVariableInScope)(context, name)) {
                const callee = node.type === 'NewExpression' ? identifier : node;
                report(callee);
            }
        }));
    }
};
//# sourceMappingURL=NoImplicitDomGlobals.js.map