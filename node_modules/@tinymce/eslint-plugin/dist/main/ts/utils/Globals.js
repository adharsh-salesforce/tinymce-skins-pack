"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDomGlobals = void 0;
const path = __importStar(require("path"));
const resolve = __importStar(require("resolve"));
const ts = __importStar(require("typescript"));
const globalsCache = {};
const getVariableExportList = (ast) => {
    const vars = [];
    const addVariable = (node) => {
        const name = node.name;
        if (name && name.kind === ts.SyntaxKind.Identifier) {
            vars.push(name.escapedText);
        }
    };
    ts.forEachChild(ast, (node) => {
        switch (node.kind) {
            case ts.SyntaxKind.FunctionDeclaration:
            case ts.SyntaxKind.MethodDeclaration:
            case ts.SyntaxKind.PropertyDeclaration:
                addVariable(node);
                break;
            case ts.SyntaxKind.VariableStatement:
                const statement = node;
                statement.declarationList.declarations.forEach((decl) => {
                    addVariable(decl);
                });
                break;
            default:
                break;
        }
    });
    return vars;
};
const getDomGlobals = () => {
    if (!globalsCache.hasOwnProperty('dom')) {
        // Resolve the path to the TS dom library types
        const resolved = resolve.sync('typescript');
        const domLib = path.join(path.dirname(resolved), 'lib.dom.d.ts');
        // Parse the types
        const prog = ts.createProgram([domLib], {});
        const ast = prog.getSourceFile(domLib);
        // Extract the variables and cache the dom globals lookup
        globalsCache.dom = ast ? getVariableExportList(ast) : [];
    }
    return globalsCache.dom;
};
exports.getDomGlobals = getDomGlobals;
//# sourceMappingURL=Globals.js.map