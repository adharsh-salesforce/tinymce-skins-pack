"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isVarUsedBeforeDeclaration = exports.isConstantVariable = exports.hasVariableInScope = exports.findVariableFromScope = void 0;
const findVariableFromScope = (context, name) => {
    let scope = context.getScope();
    while (scope && scope.type !== 'global') {
        const foundVar = scope.variables.find((v) => v.name === name);
        if (foundVar !== undefined) {
            return foundVar;
        }
        scope = scope.upper;
    }
    return undefined;
};
exports.findVariableFromScope = findVariableFromScope;
const hasVariableInScope = (context, name) => (0, exports.findVariableFromScope)(context, name) !== undefined;
exports.hasVariableInScope = hasVariableInScope;
const isConstantVariable = (variable) => {
    var _a;
    const def = variable.defs[0];
    if (def !== undefined && ((_a = def.parent) === null || _a === void 0 ? void 0 : _a.type) === 'VariableDeclaration') {
        return def.parent.kind === 'const';
    }
    else {
        return false;
    }
};
exports.isConstantVariable = isConstantVariable;
const isVarUsedBeforeDeclaration = (identifier, definition) => {
    var _a, _b, _c;
    const definitionLoc = (_b = (_a = definition.identifiers[0]) === null || _a === void 0 ? void 0 : _a.loc) === null || _b === void 0 ? void 0 : _b.start;
    const currentLoc = (_c = identifier.loc) === null || _c === void 0 ? void 0 : _c.start;
    if (definitionLoc !== undefined && currentLoc !== undefined) {
        return definitionLoc.line >= currentLoc.line;
    }
    else {
        // We don't know the location, so just assume the identifier is used before the variable declaration
        return true;
    }
};
exports.isVarUsedBeforeDeclaration = isVarUsedBeforeDeclaration;
//# sourceMappingURL=ScopeUtils.js.map