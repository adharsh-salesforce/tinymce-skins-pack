import { Param, ParamData } from './param';
import { Target } from './target';
import { Type } from './type';
export interface Return {
    readonly types: string[];
    readonly desc: string;
}
export interface MemberData extends Target {
    readonly dataTypes?: string[];
    readonly mixType?: string;
    readonly return?: Return;
    readonly staticLink?: boolean;
    readonly type?: string;
    readonly params?: ParamData[];
}
/**
 * Member class contains details about methods, properties, events etc.
 *
 * @class moxiedoc.Member
 */
declare class Member extends Target {
    _params: Param[];
    _parentType: Type;
    dataTypes: string[];
    mixType: string;
    return: Return;
    staticLink: boolean;
    type: string;
    constructor(data: MemberData);
    /**
     * Adds a new parameter to the member.
     *
     * @method addParam
     * @param {Param} param Parameter info instance.
     * @return {Param} Param info instance that got passed in.
     */
    addParam(param: Param): Param;
    /**
     * Returns an array of parameters.
     *
     * @method getParams
     * @return {Array} Array of Param instances.
     */
    getParams(): Param[];
    /**
     * Returns true/false if the member is static.
     *
     * @method isStatic
     * @return {Boolean} Static state.
     */
    isStatic(): boolean;
    getParentType(): Type;
    /**
     * Serializes the Member as JSON.
     *
     * @method toJSON
     * @return {Object} JSON object.
     */
    toJSON(): Record<string, any>;
    clone(): Member;
}
export { Member };
//# sourceMappingURL=member.d.ts.map