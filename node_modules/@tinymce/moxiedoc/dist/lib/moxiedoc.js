"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.process = void 0;
const fs = require("fs");
const matcher = require("matcher");
const path = require("path");
const builder_1 = require("./builder");
const exporter_1 = require("./exporter");
const Reporter = require("./reporter");
exports.Builder = builder_1.Builder;
exports.Exporter = exporter_1.Exporter;
/**
 * Process the specified files and generate documentation.
 *
 * @method process
 * @example
 * moxiedoc.process({
 *     template: 'cli',
 *     verbose: true,
 *     debug: false,
 *     paths: [
 *         'js/classes'
 *     ],
 *     out: 'output'
 * });
 * @param  {[type]} settings [description]
 * @return {[type]}          [description]
 */
const process = (settings) => {
    settings.out = settings.out || 'tmp/out.zip';
    settings.template = settings.template || 'cli';
    if (settings.verbose) {
        Reporter.setLevel(2 /* INFO */);
    }
    if (settings.debug) {
        Reporter.setLevel(1 /* DEBUG */);
    }
    const result = { errors: 0, warnings: 0 };
    const builder = new builder_1.Builder();
    // Setup a hook to listen for errors/warnings
    Reporter.addHook((level) => {
        if (level === 4 /* ERROR */) {
            result.errors++;
        }
        else if (level === 3 /* WARN */) {
            result.warnings++;
        }
    });
    const listFiles = (dirPath, patterns) => {
        let output = [];
        const matches = (filePath) => {
            return patterns.filter((pattern) => matcher.isMatch(path.basename(filePath), pattern)).length > 0;
        };
        fs.readdirSync(dirPath).forEach((filePath) => {
            filePath = path.join(dirPath, filePath);
            if (fs.statSync(filePath).isDirectory()) {
                output = output.concat(listFiles(filePath, patterns));
            }
            else if (matches(filePath)) {
                output.push(filePath);
            }
        });
        return output;
    };
    settings.paths.forEach((filePath) => {
        if (fs.statSync(filePath).isDirectory()) {
            listFiles(filePath, ['*.js', '*.ts']).forEach((dirFilePath) => {
                builder.parser.parseFile(dirFilePath);
            });
        }
        else {
            builder.parser.parseFile(filePath);
        }
    });
    builder.api.removePrivates();
    if (!settings.dry) {
        const exporter = new exporter_1.Exporter({
            template: settings.template
        });
        exporter.exportTo(builder.api, settings.out);
    }
    return result;
};
exports.process = process;
//# sourceMappingURL=moxiedoc.js.map