import { Api } from './api';
import { Member } from './member';
import { Target } from './target';
export interface TypeData extends Target {
    readonly fullName: string;
    readonly type: string;
}
/**
 * Type class contains details about classes, enums, structs etc.
 *
 * @class moxiedoc.Type
 */
declare class Type extends Target {
    _allMembers: Member[];
    _api: Api;
    _members: Member[];
    _mixes: string[];
    _mixesTypes: Type[];
    _mixinsTypes: Type[];
    fullName: string;
    type: string;
    /**
     * Constructs a new Type instance.
     *
     * @constructor
     * @param {Object} data Json structure with type data.
     */
    constructor(data: TypeData);
    /**
     * Adds a new member to the type.
     *
     * @method addMember
     * @param {Member} member Member instance to add to type.
     * @return {Member} Member info instance that was passed in.
     */
    addMember(member: Member): Member;
    getMembers(includeInherited?: boolean): Member[];
    getMixes(): Type[];
    getMixins(): Type[];
    addMixin(mixin: string): string;
    getSubTypes(): Type[];
    getSuperTypes(): Type[];
    /**
     * Returns an array of the members by the specified type.
     *
     * @method getMembersByType
     * @param {String} type Type name to get members by.
     * @return {Array} Array of members of the type Member.
     */
    getMembersByType(type: string, includeInherited?: boolean): Member[];
    /**
     * Returns an array of constructors some languages might have multiple due to overloading.
     *
     * @method getConstructors
     * @return {Array} Array of constructors of the type Member.
     */
    getConstructors(includeInherited?: boolean): Member[];
    /**
     * Returns an array of methods.
     *
     * @method getMethods
     * @return {Array} Array of methods of the type Member.
     */
    getMethods(includeInherited?: boolean): Member[];
    /**
     * Returns an array of properties.
     *
     * @method getProperties
     * @return {Array} Array of properties of the type Member.
     */
    getProperties(includeInherited?: boolean): Member[];
    /**
     * Returns an array of events.
     *
     * @method getProperties
     * @return {Array} Array of events of the type Member.
     */
    getEvents(includeInherited?: boolean): Member[];
    /**
     * Returns an array of fields.
     *
     * @method getFields
     * @return {Array} Array of fields of the type Member.
     */
    getFields(includeInherited?: boolean): Member[];
    /**
     * Returns an array of settings.
     *
     * @method getSettings
     * @return {Array} Array of settings of the type Member.
     */
    getSettings(includeInherited?: boolean): Member[];
    /**
     * Returns an array of callbacks.
     *
     * @method getCallbacks
     * @return {Array} Array of callbacks of the type Member.
     */
    getCallbacks(includeInherited?: boolean): Member[];
    /**
     * Returns a member by name.
     *
     * @method getMemberByName
     * @param {String} name Name of the member to retrive.
     * @param {Boolean} [includeInherited] Include inherited members.
     * @return {moxiedoc.Member} Member instance or null.
     */
    getMemberByName(name: string, includeInherited?: boolean): Member | null;
    /**
     * Removes all private members from the type.
     *
     * @method removePrivates
     */
    removePrivates(): void;
    /**
     * Serializes the Type as JSON.
     *
     * @method toJSON
     * @return {Object} JSON object.
     */
    toJSON(): Record<string, any>;
}
export { Type };
//# sourceMappingURL=type.d.ts.map