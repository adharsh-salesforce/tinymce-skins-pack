"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Member = void 0;
const param_1 = require("./param");
const target_1 = require("./target");
/**
 * Member class contains details about methods, properties, events etc.
 *
 * @class moxiedoc.Member
 */
class Member extends target_1.Target {
    constructor(data) {
        super();
        const self = this;
        const getSummary = (desc) => {
            let pos = desc.indexOf('.');
            if (pos > 100 || pos === -1) {
                pos = 100;
            }
            return desc.substr(0, pos);
        };
        for (const name in data) {
            if (data.hasOwnProperty(name)) {
                this[name] = data[name];
            }
        }
        this._params = [];
        if (data.params) {
            data.params.forEach((paramData) => {
                self.addParam(new param_1.Param(paramData));
            });
        }
        if (!this.summary) {
            this.summary = getSummary(this.desc);
        }
    }
    /**
     * Adds a new parameter to the member.
     *
     * @method addParam
     * @param {Param} param Parameter info instance.
     * @return {Param} Param info instance that got passed in.
     */
    addParam(param) {
        this._params.push(param);
        return param;
    }
    /**
     * Returns an array of parameters.
     *
     * @method getParams
     * @return {Array} Array of Param instances.
     */
    getParams() {
        return this._params;
    }
    /**
     * Returns true/false if the member is static.
     *
     * @method isStatic
     * @return {Boolean} Static state.
     */
    isStatic() {
        return !!this.static;
    }
    getParentType() {
        return this._parentType;
    }
    /**
     * Serializes the Member as JSON.
     *
     * @method toJSON
     * @return {Object} JSON object.
     */
    toJSON() {
        const json = {};
        for (const name in this) {
            if (typeof (this[name]) !== 'function' && name.indexOf('_') !== 0) {
                json[name] = this[name];
            }
        }
        json.params = [];
        this._params.forEach((param) => {
            json.params.push(param.toJSON());
        });
        return json;
    }
    clone() {
        const parentType = this._parentType;
        const clone = new Member(this.toJSON());
        clone._parentType = parentType;
        return clone;
    }
}
exports.Member = Member;
//# sourceMappingURL=member.js.map