/// <reference types="node" />
import { TranscodeEncoding } from 'buffer';
import { EventEmitter } from 'events';
interface TagInfo {
    readonly line: number;
    readonly filePath: string;
}
interface ParserInfo {
    filePath?: string;
    line: number;
    readonly clone: () => ParserInfo;
    readonly toString: () => string;
}
interface ParserSettings {
    start?: (startText: string, startInfo: TagInfo) => void;
    tag?: (currentTag: string, tagText: string, tagInfo: TagInfo) => void;
    end?: (currentTag: string, info: ParserInfo) => void;
}
/**
 * This class parses jsdoc style comment blocks and calls start, tag and end based on the content.
 * It's a low level parser only fireing events for each token it finds.
 *
 * @example
 * var parser = new Parser({
 *     start: function(text) {
 *         console.log('Comment block start', text);
 *     },
 *
 *     tag: function(name, text) {
 *         console.log('Tag name:', name, 'Text:', text);
 *     },
 *
 *     end: function() {
 *         console.log('End of block');
 *     }
 * });
 *
 * parser.parse('myfile.js');
 *
 * @example
 * var parser = new Parser();
 *
 * parser.on('start', callback);
 *
 * parser.parse('myfile.js');
 *
 * @class moxiedoc.Parser
 * @extends events.EventEmitter
 */
/**
 * Creates a new parser instance with the optional settings.
 *
 * @constructor
 * @param {Object} [settings={}] Name/value collection with settings.
 */
declare class Parser extends EventEmitter {
    settings: ParserSettings;
    info: ParserInfo;
    lines: string[];
    constructor(settings?: ParserSettings);
    /**
     * Parses the specified string and calls events when it finds comment blocks and tags.
     *
     * @method parse
     * @param {String} content Content to parse.
     */
    parse(content: string): void;
    /**
     * Parses the specified file.
     *
     * @method parseFile
     * @param {String} filePath Path to the file to parse.
     * @param {String} [encoding=utf-8] Encoding to use.
     */
    parseFile(filePath: string, encoding?: TranscodeEncoding): void;
}
export { Parser };
//# sourceMappingURL=parser.d.ts.map