import { Api } from './api';
import { Member } from './member';
import { Parser } from './parser';
import * as Reporter from './reporter';
import { Target } from './target';
import { Type } from './type';
export interface Tag {
    name: string;
    text: string;
}
declare type AddTagCallback = (this: Builder, text: string, name: string, tags: Tag[]) => void;
/**
 * This class build a API structure in JSON format by parsing files.
 *
 * @example
 * var builder = new Builder();
 *
 * builder.parser.parseFile('somefile.js');
 *
 * console.log(builder.toJSON());
 *
 * @class moxiedoc.Builder
 */
declare class Builder {
    static memberTags: Record<string, boolean>;
    /**
     * Name/value collection of tag handlers.
     *
     * @member {Object} tags
     */
    static tags: Record<string, AddTagCallback>;
    static typeTags: Record<string, boolean>;
    /**
     * Api instance that holds all global types etc.
     *
     * @member {moxiedoc.Api} api
     */
    api: Api;
    /**
     * Current member or null.
     *
     * @member {Object} currentMember
     */
    currentMember: Member | null;
    /**
     * Current type instance or null.
     *
     * @member {Object} currentType
     */
    currentType: Type | null;
    /**
     * Current parser instance.
     *
     * @member {Object} parser
     */
    parser: Parser;
    reporter: typeof Reporter;
    /**
     * Current target type or member or null.
     *
     * @member {Object} target
     */
    target: Target | null;
    /**
     * Constructs a new Builder instance.
     *
     * @constructor
     */
    constructor();
    /**
     * Adds aliases for tags.
     *
     * @static
     * @method addAliases
     * @param {Object} aliases Name/value of aliases.
     */
    static addAliases(aliases: Record<string, string>): void;
    /**
     * Adds a boolean tag type.
     *
     * @static
     * @method addBoolTag
     * @param {String/Array} name Tag name, space separates list or array of tag names.
     */
    static addBoolTag(name: string): void;
    /**
     * Adds a list of tags that control the member type for example 'method'.
     *
     * @method addMemberTags
     * @static
     * @param {String} names Space separated list of types that control the member type.
     */
    static addMemberTags(names: string): void;
    /**
     * Adds a simple string tag type.
     *
     * @static
     * @method addStringTag
     * @param {String/Array} name Tag name, space separates list or array of tag names.
     */
    static addStringTag(name: string): void;
    /**
     * Adds a new tag type by name. The callback will be executed when
     * the specified tag is found in a comment block.
     *
     * @method addTag
     * @static
     * @param {String/Array} names Tag name, space separates list or array of tag names.
     * @param {Function} callback Callback to be executed when a tag of that type is found.
     */
    static addTag(names: string | string[], callback: AddTagCallback): void;
    /**
     * Adds a list of tags that control the type for example 'class'.
     *
     * @method addTypeTags
     * @static
     * @param {String} names Space separated list of types that control the type.
     */
    static addTypeTags(names: string): void;
}
export { Builder };
//# sourceMappingURL=builder.d.ts.map