import { Target } from './target';
import { Type } from './type';
export interface NamespaceData extends Target {
    readonly fullName: string;
}
/**
 * Namespace class.
 *
 * @class moxiedoc.Namespace
 */
declare class Namespace extends Target {
    _types: Type[];
    _namespaces: Namespace[];
    _parent?: Namespace;
    fullName: string;
    /**
     * Constructs a new Namespace instance.
     *
     * @constructor
     * @param {Object} data Json structure with member data.
     */
    constructor(data: NamespaceData);
    addChildNamespace(namespace: Namespace): Namespace;
    getParent(): Namespace | undefined;
    getNamespaces(): Namespace[];
    addType(type: Type): Type;
    getTypes(): Type[];
    /**
     * Returns an array of the types by the specified type.
     *
     * @method getMembersByType
     * @param {String} typeName Type name to get members by.
     * @return {Array} Array of members of the type MemberInfo.
     */
    getTypesByType(typeName: string): Type[];
    /**
     * Returns an array of classes.
     *
     * @method getClasses
     * @return {Array} Array of classes of the type Type.
     */
    getClasses(): Type[];
    /**
     * Returns an array of mixins.
     *
     * @method getMixins
     * @return {Array} Array of mixins of the type Type.
     */
    getMixins(): Type[];
    /**
     * Returns an array of structs.
     *
     * @method getStructs
     * @return {Array} Array of structs of the type Type.
     */
    getStructs(): Type[];
    /**
     * Removes all private types from the namespace.
     *
     * @method removePrivates
     */
    removePrivates(): void;
    /**
     * Serializes the Namespace as JSON.
     *
     * @method toJSON
     * @return {Object} JSON object.
     */
    toJSON(): Record<string, any>;
}
export { Namespace };
//# sourceMappingURL=namespace.d.ts.map